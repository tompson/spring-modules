/* Generated By:JavaCC: Do not edit this line. ValangParser.java */
package org.springmodules.validation.valang;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.collections.Predicate;
import org.apache.commons.collections.functors.AndPredicate;
import org.apache.commons.collections.functors.NotPredicate;
import org.apache.commons.collections.functors.OrPredicate;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springmodules.util.dateparser.DateParseException;
import org.springmodules.validation.functions.BeanPropertyFunction;
import org.springmodules.validation.functions.DateLiteralFunction;
import org.springmodules.validation.functions.Function;
import org.springmodules.validation.functions.LiteralFunction;
import org.springmodules.validation.functions.MapEntryFunction;
import org.springmodules.validation.functions.TargetBeanFunction;
import org.springmodules.validation.predicates.BasicValidationRule;
import org.springmodules.validation.predicates.Operator;
import org.springmodules.validation.predicates.OperatorConstants;

public class ValangParser implements ValangParserConstants {
        private static Log log = LogFactory.getLog(ValangParser.class);

        private DefaultVisitor visitor = new DefaultVisitor();

        public DefaultVisitor getVisitor() {
           if (this.visitor == null) {
               throw new IllegalStateException("Visistor is not set on parser");
           }
           return this.visitor;
        }

        public void setVisitor(DefaultVisitor visitor) {
                this.visitor = visitor;
        }

  final public Predicate parseExpression() throws ParseException {
        Predicate predicate = null;
        Function targetBeanFunction = new TargetBeanFunction();
    predicate = predicates(targetBeanFunction);
    jj_consume_token(0);
                                                           {if (true) return predicate;}
    throw new Error("Missing return statement in function");
  }

  final public Collection parseValidation() throws ParseException {
        Predicate predicate = null;
        Collection rules = new ArrayList();
        String message = null;
        String field = null;
        String errorKey = null;
        Collection errorArgs = null;
        Function function = null;
        Function fieldFunction = null;
    label_1:
    while (true) {
      jj_consume_token(43);
      jj_consume_token(PATH);
                                field = token.image;
                                fieldFunction = new BeanPropertyFunction(field);
                                /* MOD-26: re-initiliaze error key and arguments to null for every rule.
				   kudos to Cèsar Ordiñana for reporting this bug. */
                                errorKey = null;
                                errorArgs = new ArrayList();
      jj_consume_token(44);
      predicate = predicates(fieldFunction);
      jj_consume_token(44);
      jj_consume_token(STRING);
                                   message = token.image.substring(1, token.image.length() - 1);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        jj_consume_token(STRING);
                                           errorKey = token.image.substring(1, token.image.length() - 1);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 44:
          jj_consume_token(44);
          label_2:
          while (true) {
            if (jj_2_1(2)) {
              ;
            } else {
              break label_2;
            }
            function = function(fieldFunction);
                                                                                     errorArgs.add(function);
            jj_consume_token(45);
          }
          function = function(fieldFunction);
                                                                             errorArgs.add(function);
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      jj_consume_token(46);
                        /* JIRA-MOD-20: take into account error key and error args for localization, kudos to Cèsar Ordiñana. */
                        rules.add(new BasicValidationRule(field, predicate, errorKey, message, errorArgs));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 43:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
                {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate not(Function fieldFunction) throws ParseException {
        Predicate predicate = null;
    jj_consume_token(NOT);
    predicate = expression(fieldFunction);
                                                      {if (true) return NotPredicate.getInstance(predicate);}
    throw new Error("Missing return statement in function");
  }

  final public Predicate predicates(Function fieldFunction) throws ParseException {
        Predicate predicate1 = null;
        Predicate predicate2 = null;
        boolean andTest = false;
        boolean orTest = false;
    predicate1 = expression(fieldFunction);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        jj_consume_token(AND);
                                          andTest = true;
        break;
      case OR:
        jj_consume_token(OR);
                                          orTest = true;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      predicate2 = expression(fieldFunction);
                                if (andTest) {
                                        predicate1 = AndPredicate.getInstance(predicate1, predicate2);
                                        andTest = false;
                                } else if (orTest) {
                                        predicate1 = OrPredicate.getInstance(predicate1, predicate2);
                                        orTest = false;
                                }
    }
                {if (true) return predicate1;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate expression(Function fieldFunction) throws ParseException {
        Predicate predicate = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 47:
      jj_consume_token(47);
      predicate = predicates(fieldFunction);
      jj_consume_token(48);
      break;
    case NOT:
      predicate = not(fieldFunction);
      break;
    case TRUE:
    case FALSE:
    case NUM:
    case STRING:
    case DATE:
    case PATH:
    case 50:
    case 51:
    case 52:
      predicate = predicate(fieldFunction);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return predicate;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate predicate(Function fieldFunction) throws ParseException {
        Function leftFunction = null;
        Function rightFunction1 = null;
        Function rightFunction2 = null;
        Function tmpFunction = null;
        Operator operator = null;
        boolean notBetween = false;
        boolean notIn = false;
        Collection functions = new ArrayList();
        boolean collectionProperty = false;
    leftFunction = function(fieldFunction);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_NULL:
    case IS_NOT_NULL:
    case HAS_TEXT:
    case HAS_NO_TEXT:
    case HAS_LENGTH:
    case HAS_NO_LENGTH:
    case IS_BLANK:
    case IS_NOT_BLANK:
    case IS_UPPER_CASE:
    case IS_NOT_UPPER_CASE:
    case IS_LOWER_CASE:
    case IS_NOT_LOWER_CASE:
    case IS_WORD:
    case IS_NOT_WORD:
    case MORE_THAN_OR_EQUAL:
    case MORE_THAN:
    case LESS_THAN_OR_EQUAL:
    case LESS_THAN:
    case NOT_EQUAL:
    case EQUALS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MORE_THAN_OR_EQUAL:
      case MORE_THAN:
      case LESS_THAN_OR_EQUAL:
      case LESS_THAN:
      case NOT_EQUAL:
      case EQUALS:
        operator = binaryOperator();
        rightFunction1 = function(fieldFunction);
        break;
      case IS_NULL:
      case IS_NOT_NULL:
      case HAS_TEXT:
      case HAS_NO_TEXT:
      case HAS_LENGTH:
      case HAS_NO_LENGTH:
      case IS_BLANK:
      case IS_NOT_BLANK:
      case IS_UPPER_CASE:
      case IS_NOT_UPPER_CASE:
      case IS_LOWER_CASE:
      case IS_NOT_LOWER_CASE:
      case IS_WORD:
      case IS_NOT_WORD:
        operator = unaryOperator();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        {if (true) return getVisitor().getPredicate(leftFunction, operator, rightFunction1);}
      break;
    case BETWEEN:
    case NOT_BETWEEN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BETWEEN:
        jj_consume_token(BETWEEN);
        break;
      case NOT_BETWEEN:
        jj_consume_token(NOT_BETWEEN);
                                                              notBetween = true;
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightFunction1 = function(fieldFunction);
      jj_consume_token(AND);
      rightFunction2 = function(fieldFunction);
                                        if (notBetween) {
                                                {if (true) return getVisitor().getPredicate(leftFunction, OperatorConstants.NOT_BETWEEN_OPERATOR, new LiteralFunction(new Function[] { rightFunction1, rightFunction2 }));}
                                        } else {
                                                {if (true) return getVisitor().getPredicate(leftFunction, OperatorConstants.BETWEEN_OPERATOR, new LiteralFunction(new Function[] { rightFunction1, rightFunction2 }));}
                                        }
      break;
    case IN:
    case NOT_IN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        jj_consume_token(IN);
        break;
      case NOT_IN:
        jj_consume_token(NOT_IN);
                                                    notIn = true;
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NUM:
      case STRING:
      case DATE:
      case PATH:
      case 50:
      case 51:
      case 52:
        label_4:
        while (true) {
          if (jj_2_2(2)) {
            ;
          } else {
            break label_4;
          }
          tmpFunction = function(fieldFunction);
                                                                                        functions.add(tmpFunction);
          jj_consume_token(45);
        }
        tmpFunction = function(fieldFunction);
                                                                                functions.add(tmpFunction);
        break;
      case 49:
        jj_consume_token(49);
        tmpFunction = beanProperty(fieldFunction);
                                                                                        collectionProperty = true;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                        if (!collectionProperty) {
                                                tmpFunction = new LiteralFunction(functions);
                                        }
                                        if (notIn) {
                                                {if (true) return getVisitor().getPredicate(leftFunction, OperatorConstants.NOT_IN_OPERATOR, tmpFunction);}
                                        } else {
                                                {if (true) return getVisitor().getPredicate(leftFunction, OperatorConstants.IN_OPERATOR, tmpFunction);}
                                        }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Function function(Function fieldFunction) throws ParseException {
    String function = null;
    Function parentFunction = null;
    if (jj_2_3(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        break;
      case PATH:
        jj_consume_token(PATH);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          function = token.image;
      jj_consume_token(47);
      parentFunction = function(fieldFunction);
      jj_consume_token(48);
          {if (true) return getVisitor().getFunction(function, parentFunction);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case NUM:
      case STRING:
      case DATE:
      case PATH:
      case 52:
        parentFunction = beanPropertyOrLiteral(fieldFunction);
                                                                  {if (true) return parentFunction;}
        break;
      case 51:
        jj_consume_token(51);
              {if (true) return fieldFunction;}
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Function beanPropertyOrLiteral(Function fieldFunction) throws ParseException {
        Function function = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case NUM:
    case STRING:
    case DATE:
      function = literal();
                                       {if (true) return function;}
      break;
    case PATH:
    case 52:
      function = beanProperty(fieldFunction);
                                                 {if (true) return function;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Function literal() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
                      {if (true) return new LiteralFunction(Boolean.TRUE);}
      break;
    case FALSE:
      jj_consume_token(FALSE);
                      {if (true) return new LiteralFunction(Boolean.FALSE);}
      break;
    case STRING:
      jj_consume_token(STRING);
                      {if (true) return new LiteralFunction(token.image.substring(1, token.image.length() - 1));}
      break;
    case NUM:
      jj_consume_token(NUM);
                      {if (true) return new LiteralFunction(new BigDecimal(token.image));}
      break;
    case DATE:
      jj_consume_token(DATE);
                                        try {
                                                        getVisitor().getDateParser().parse(token.image.substring(1, token.image.length() - 1));
                                        } catch (DateParseException e) {
                                                {if (true) throw new ParseException("Could not parse date [" + token.image.substring(1, token.image.length() - 1) + "] at line " + token.beginLine + ", column " + token.beginColumn + ".");}
                                        }
                                        {if (true) return new DateLiteralFunction(token.image.substring(1, token.image.length() - 1), getVisitor().getDateParser(), token.beginLine, token.beginColumn);}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Function beanProperty(Function fieldFunction) throws ParseException {
        Function function = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PATH:
      function = path();
                                    {if (true) return function;}
      break;
    case 52:
      function = mapEntry(fieldFunction);
                                                     {if (true) return function;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Function path() throws ParseException {
    jj_consume_token(PATH);
                          {if (true) return new BeanPropertyFunction(token.image);}
    throw new Error("Missing return statement in function");
  }

  final public Function mapEntry(Function fieldFunction) throws ParseException {
        Function pathFunction = null;
        Function function = null;
        int beginLine = 0;
        int beginColumn = 0;
    jj_consume_token(52);
                beginLine = token.beginLine;
                beginColumn = token.beginColumn;
    pathFunction = path();
    jj_consume_token(47);
    function = function(fieldFunction);
    jj_consume_token(48);
                {if (true) return new MapEntryFunction(pathFunction, function, beginLine, beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Operator binaryOperator() throws ParseException {
        Operator operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_EQUAL:
      jj_consume_token(NOT_EQUAL);
                                          operator = OperatorConstants.NOT_EQUAL_OPERATOR;
      break;
    case MORE_THAN_OR_EQUAL:
      jj_consume_token(MORE_THAN_OR_EQUAL);
                                          operator = OperatorConstants.MORE_THAN_OR_EQUAL_OPERATOR;
      break;
    case MORE_THAN:
      jj_consume_token(MORE_THAN);
                                          operator = OperatorConstants.MORE_THAN_OPERATOR;
      break;
    case LESS_THAN_OR_EQUAL:
      jj_consume_token(LESS_THAN_OR_EQUAL);
                                          operator = OperatorConstants.LESS_THAN_OR_EQUAL_OPERATOR;
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
                                          operator = OperatorConstants.LESS_THAN_OPERATOR;
      break;
    case EQUALS:
      jj_consume_token(EQUALS);
                                          operator = OperatorConstants.EQUALS_OPERATOR;
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return operator;}
    throw new Error("Missing return statement in function");
  }

  final public Operator unaryOperator() throws ParseException {
        Operator operator = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IS_NULL:
      jj_consume_token(IS_NULL);
                                          operator = OperatorConstants.NULL_OPERATOR;
      break;
    case IS_NOT_NULL:
      jj_consume_token(IS_NOT_NULL);
                                          operator = OperatorConstants.NOT_NULL_OPERATOR;
      break;
    case HAS_TEXT:
      jj_consume_token(HAS_TEXT);
                                          operator = OperatorConstants.HAS_TEXT_OPERATOR;
      break;
    case HAS_NO_TEXT:
      jj_consume_token(HAS_NO_TEXT);
                                          operator = OperatorConstants.HAS_NO_TEXT_OPERATOR;
      break;
    case HAS_LENGTH:
      jj_consume_token(HAS_LENGTH);
                                          operator = OperatorConstants.HAS_LENGTH_OPERATOR;
      break;
    case HAS_NO_LENGTH:
      jj_consume_token(HAS_NO_LENGTH);
                                          operator = OperatorConstants.HAS_NO_LENGTH_OPERATOR;
      break;
    case IS_BLANK:
      jj_consume_token(IS_BLANK);
                                          operator = OperatorConstants.IS_BLANK_OPERATOR;
      break;
    case IS_NOT_BLANK:
      jj_consume_token(IS_NOT_BLANK);
                                  operator = OperatorConstants.IS_NOT_BLANK_OPERATOR;
      break;
    case IS_WORD:
      jj_consume_token(IS_WORD);
                                          operator = OperatorConstants.IS_WORD_OPERATOR;
      break;
    case IS_NOT_WORD:
      jj_consume_token(IS_NOT_WORD);
                                  operator = OperatorConstants.IS_NOT_WORD_OPERATOR;
      break;
    case IS_UPPER_CASE:
      jj_consume_token(IS_UPPER_CASE);
                                          operator = OperatorConstants.IS_UPPER_CASE_OPERATOR;
      break;
    case IS_NOT_UPPER_CASE:
      jj_consume_token(IS_NOT_UPPER_CASE);
                                                  operator = OperatorConstants.IS_NOT_UPPER_CASE_OPERATOR;
      break;
    case IS_LOWER_CASE:
      jj_consume_token(IS_LOWER_CASE);
                                          operator = OperatorConstants.IS_LOWER_CASE_OPERATOR;
      break;
    case IS_NOT_LOWER_CASE:
      jj_consume_token(IS_NOT_LOWER_CASE);
                                                  operator = OperatorConstants.IS_NOT_LOWER_CASE_OPERATOR;
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return operator;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(PATH)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    if (jj_scan_token(51)) return true;
    return false;
  }

  final private boolean jj_3R_6() {
    if (jj_3R_8()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    if (jj_scan_token(47)) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  final private boolean jj_3R_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    if (jj_scan_token(45)) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(DATE)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    return false;
  }

  public ValangParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x60,0x60,0xc000080,0xf3fff000,0x300,0xc00,0xc000000,0xf3ffff00,0x0,0xc000000,0xc000000,0xc000000,0x0,0xf0000000,0x3fff000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1000,0x1000,0x800,0x0,0x0,0x1c841c,0x3,0x0,0x0,0x1e041c,0x3,0x40400,0x18041c,0x10041c,0x1c,0x100400,0x3,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[3];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ValangParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ValangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ValangParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ValangParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ValangParser(ValangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ValangParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[53];
    for (int i = 0; i < 53; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 3; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
