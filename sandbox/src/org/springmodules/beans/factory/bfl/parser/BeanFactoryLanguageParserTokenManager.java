/* Generated By:JavaCC: Do not edit this line. BeanFactoryLanguageParserTokenManager.java */
package org.springmodules.beans.factory.bfl.parser;
import org.springmodules.beans.factory.drivers.Alias;
import org.springmodules.beans.factory.drivers.Bean;
import org.springmodules.beans.factory.drivers.BeanReference;
import org.springmodules.beans.factory.drivers.Instance;
import org.springmodules.beans.factory.drivers.LiteralList;
import org.springmodules.beans.factory.drivers.LiteralMap;
import org.springmodules.beans.factory.drivers.LiteralProperties;
import org.springmodules.beans.factory.drivers.LiteralValue;
import org.springframework.util.StringUtils;
import org.springframework.core.io.ClassPathResource;
import org.springframework.context.ApplicationContext;
import org.springframework.beans.factory.NoSuchBeanDefinitionException;
import java.util.Map;
import java.util.HashMap;
import java.util.Collection;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.IOException;

public class BeanFactoryLanguageParserTokenManager implements BeanFactoryLanguageParserConstants
{
        private String hereStringEnd = null;
        private StringBuffer hereStringText = null;

        public String getHereStringText() {
                return hereStringText.toString();
        }
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 46;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 47;
         return jjMoveNfa_0(0, 0);
      case 43:
         jjmatchedKind = 51;
         return jjMoveNfa_0(0, 0);
      case 44:
         jjmatchedKind = 43;
         return jjMoveNfa_0(0, 0);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 59:
         jjmatchedKind = 42;
         return jjMoveNfa_0(0, 0);
      case 60:
         return jjMoveStringLiteralDfa1_0(0x200000000L);
      case 61:
         jjmatchedKind = 41;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0xa00080L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0xc0000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x100100L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x6800L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x401000L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 91:
         jjmatchedKind = 44;
         return jjMoveNfa_0(0, 0);
      case 93:
         jjmatchedKind = 45;
         return jjMoveNfa_0(0, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0xa00080L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0xc0000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100100L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x6800L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x401000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 123:
         jjmatchedKind = 48;
         return jjMoveNfa_0(0, 0);
      case 125:
         jjmatchedKind = 49;
         return jjMoveNfa_0(0, 0);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      case 62:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0xe840L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 79:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xe840L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 111:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0xc0000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000L);
      case 60:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x801100L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x2880L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000L);
      case 87:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         break;
      case 90:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x801100L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x404000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2880L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x208000L);
      case 119:
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 6;
            jjmatchedPos = 2;
         }
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x83280L);
      case 89:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x600000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x83280L);
      case 121:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0x200100L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x402880L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 89:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x48000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x200100L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x402880L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x800100L);
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x41000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 84:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x80L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x41000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 69:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 80:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x208000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 89:
         return jjMoveStringLiteralDfa7_0(active0, 0x2200L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 6;
         }
         else if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x208000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 121:
         return jjMoveStringLiteralDfa7_0(active0, 0x2200L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x6000L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 70:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x808000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 84:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1800L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L);
      case 102:
         if ((active0 & 0x100L) != 0L)
         {
            jjmatchedKind = 8;
            jjmatchedPos = 7;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x808000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 116:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x1800L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 69:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 8;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 82:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 87:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 8;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 114:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 8;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
      case 119:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 78:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 9;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x101800L);
      case 84:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 9;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 9;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x101800L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 9;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 82:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x1800L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 72:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0x1800L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x1800L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x1800L);
      case 100:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x1800L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000L);
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 82:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
         }
         else if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 14;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
         }
         else if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 14;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
      case 82:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 15;
         }
         break;
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 15;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 82:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 17;
         }
         break;
      case 114:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec4 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec5 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 37;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff601000000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 24)
                        kind = 24;
                     jjCheckNAddStates(7, 9);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddStates(10, 19);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 1:
                  if (curChar == 39)
                     jjCheckNAddStates(4, 6);
                  break;
               case 3:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 4:
                  if (curChar == 39 && kind > 25)
                     kind = 25;
                  break;
               case 5:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if (curChar != 46)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAdd(9);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(7, 9);
                  break;
               case 16:
                  if (curChar != 36)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(10, 19);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 19:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar != 36)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(20, 22);
                  break;
               case 21:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if (curChar != 36)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(24, 26);
                  break;
               case 26:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(24, 26);
                  break;
               case 27:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 24);
                  break;
               case 28:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 47)
                     jjAddStates(23, 24);
                  break;
               case 30:
                  if (curChar != 36)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(25, 27);
                  break;
               case 31:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(28, 30);
                  break;
               case 33:
                  if ((0x3ff601000000000L & l) != 0L)
                     jjCheckNAddTwoStates(33, 29);
                  break;
               case 34:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(0, 3);
                  break;
               case 36:
                  if ((0x3ff601000000000L & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddStates(10, 19);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 2:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(4, 6);
                  break;
               case 11:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(31, 32);
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 13:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x800000008000L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(10, 19);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(20, 22);
                  break;
               case 21:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(24, 26);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(27, 24);
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(25, 27);
                  break;
               case 31:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(28, 30);
                  break;
               case 33:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(33, 29);
                  break;
               case 34:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(0, 3);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddStates(10, 19);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 30)
                        kind = 30;
                     jjCheckNAddStates(0, 3);
                  }
                  break;
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(4, 6);
                  break;
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(10, 19);
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 20:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(20, 22);
                  break;
               case 21:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(22);
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
               case 26:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddTwoStates(24, 26);
                  break;
               case 27:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(27, 24);
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 30:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(25, 27);
                  break;
               case 31:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(31);
                  break;
               case 32:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAddStates(28, 30);
                  break;
               case 33:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(33, 29);
                  break;
               case 34:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(34);
                  break;
               case 35:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAddStates(0, 3);
                  break;
               case 36:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 30)
                     kind = 30;
                  jjCheckNAdd(36);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 37 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_3(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_3(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 38);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 39;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 10)
                     kind = 35;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 1:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(1, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private final int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
static final long[] jjbitVec8 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2) && kind > 36)
                     kind = 36;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   36, 33, 29, 34, 2, 3, 4, 6, 7, 8, 17, 18, 19, 22, 23, 27, 
   24, 28, 29, 31, 18, 19, 21, 30, 32, 28, 29, 31, 33, 29, 34, 14, 
   15, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec7[i2] & l2) != 0L);
      default : 
         if ((jjbitVec1[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default : 
         if ((jjbitVec8[i1] & l1) != 0L)
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\74\74\74", null, null, null, "\12", "\12", 
null, null, "\75", "\73", "\54", "\133", "\135", "\50", "\51", "\173", "\175", 
"\55\76", "\53", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "HERE_STRING_START", 
   "HERE_STRING", 
   "HERE_STRING_END", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 1, -1, 2, -1, 3, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffe7ffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[37];
private final int[] jjstateSet = new int[74];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public BeanFactoryLanguageParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public BeanFactoryLanguageParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 37; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       if (jjmatchedPos == 0 && jjmatchedKind > 40)
       {
          jjmatchedKind = 40;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 35 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                hereStringEnd = image.toString();
                hereStringText = new StringBuffer();
         break;
      case 36 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                hereStringText.append(image.toString());
         break;
      case 37 :
        if (image == null)
            image = new StringBuffer(jjstrLiteralImages[37]);
         else
            image.append(jjstrLiteralImages[37]);
                hereStringText.append(image.toString());
         break;
      case 39 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                if (image.toString().equals(hereStringEnd)) {
                        SwitchTo(DEFAULT);
                } else {
                        SwitchTo(HERE_STRING);
                }
         break;
      case 40 :
        if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                hereStringText.append(image.toString());
         break;
      default : 
         break;
   }
}
}
