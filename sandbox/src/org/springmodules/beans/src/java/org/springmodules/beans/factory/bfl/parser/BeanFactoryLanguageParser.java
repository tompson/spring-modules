/* Generated By:JavaCC: Do not edit this line. BeanFactoryLanguageParser.java */
package org.springmodules.beans.factory.bfl.parser;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.springframework.context.ApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.util.StringUtils;
import org.springmodules.beans.factory.drivers.Alias;
import org.springmodules.beans.factory.drivers.Bean;
import org.springmodules.beans.factory.drivers.BeanReference;
import org.springmodules.beans.factory.drivers.Instance;
import org.springmodules.beans.factory.drivers.LiteralList;
import org.springmodules.beans.factory.drivers.LiteralMap;
import org.springmodules.beans.factory.drivers.LiteralProperties;
import org.springmodules.beans.factory.drivers.LiteralValue;

public class BeanFactoryLanguageParser implements BeanFactoryLanguageParserConstants {
        private ClassLoader classLoader = null;
        private ApplicationContext applicationContext = null;

        public void setClassLoader(ClassLoader classLoader) {
                this.classLoader = classLoader;
        }

        public ClassLoader getClassLoader() {
                return this.classLoader;
        }

        public void setApplicationContext(ApplicationContext applicationContext) {
                this.applicationContext = applicationContext;
        }

        public ApplicationContext getApplicationContext() {
                return this.applicationContext;
        }

        private LiteralValue getLiteralValue(final String value) {
                return new LiteralValue() {
                        public String getValue() {
                                return value;
                        }
                };
        }

        private LiteralList getLiteralList(final Collection elements) {
                return new LiteralList() {
                        public Collection getElements() {
                                return elements;
                        }
                };
        }

        private LiteralMap getLiteralMap(final Map map) {
                return new LiteralMap() {
                        public Map getMap() {
                                return map;
                        }
                };
        }

        private LiteralProperties getLiteralProperties(final Map properties) {
                return new LiteralProperties() {
                        public Map getProperties() {
                                return properties;
                        }
                };
        }

        private BeanReference getBeanReference(final Bean bean, final String beanName) {
                return new BeanReference() {
                        public String getBeanName() {
                                return beanName;
                        }

                        public Bean getBean() {
                                return bean;
                        }
                };
        }

        private Bean getBean(
                        final boolean isLazy,
                        final boolean isAbstract,
                        final boolean isPrototype,
                        final BeanReference parent,
                        final Class clazz,
                        final Collection constructorArgs)
        {
                final Map properties = new HashMap();
                return new Bean() {
                        private String description = null;
                        private String initMethod = null;
                        private String destroyMethod = null;
                        private Collection dependsOn = null;
                        private String autowire = null;
                        private BeanReference factoryBean = null;
                        private String factoryMethod = null;

                        public Class getClazz() {
                                return clazz;
                        }

                        public boolean isLazy() {
                                return isLazy;
                        }

                        public boolean isAbstract() {
                                return isAbstract;
                        }

                        public boolean isSingleton() {
                                return !isPrototype;
                        }

                        public BeanReference getParent() {
                                return parent;
                        }

                        public Collection getConstructorArguments() {
                                return constructorArgs;
                        }

                        public Map getProperties() {
                                return properties;
                        }

                        public void setProperty(String propertyName, Instance value) {
                                properties.put(propertyName, value);
                        }

                        public String getDescription() {
                                return this.description;
                        }

                        public void setDescription(String description) {
                                this.description = description;
                        }

                        public String getInitMethod() {
                                return this.initMethod;
                        }

                        public void setInitMethod(String initMethod) {
                                this.initMethod = initMethod;
                        }

                        public String getDestroyMethod() {
                                return this.destroyMethod;
                        }

                        public void setDestroyMethod(String destroyMethod) {
                                this.destroyMethod = destroyMethod;
                        }

                        public Collection getDependsOn() {
                                return this.dependsOn;
                        }

                        public void setDependsOn(Collection beans) {
                                this.dependsOn = beans;
                        }

                        public String getAutowire() {
                                return this.autowire;
                        }

                        public void setAutowire(String autowire) {
                                this.autowire = autowire;
                        }

                        public BeanReference getFactoryBean() {
                                return this.factoryBean;
                        }

                        public void setFactoryBean(BeanReference factoryBean) {
                                this.factoryBean = factoryBean;
                        }

                        public String getFactoryMethod() {
                                return this.factoryMethod;
                        }

                        public void setFactoryMethod(String factoryMethod) {
                                this.factoryMethod = factoryMethod;
                        }
                };
        }

        private Alias getAlias(final BeanReference beanReference, final String alias) {
                return new Alias() {
                        public BeanReference getReferencedBean() {
                                return beanReference;
                        }

                        public String getAlias() {
                                return alias;
                        }
                };
        }

        private BeanReference findBeanReference(Collection assignments, String beanName) {
                for (Iterator iter = assignments.iterator(); iter.hasNext();) {
                        Object o = iter.next();

                        if (o instanceof BeanReference) {
                                BeanReference beanReference = (BeanReference)o;
                                if (beanName.equals(beanReference.getBeanName())) {
                                        return beanReference;
                                }
                        } else if (o instanceof Alias) {
                                Alias alias = (Alias)o;
                                if (beanName.equals(alias.getAlias())) {
                                        return alias.getReferencedBean();
                                }
                        }
                }

                if (getApplicationContext() != null && applicationContext.containsBean(beanName)) {
                        return getBeanReference(null, beanName);
                }

                return null;
        }

        private Bean findBean(Collection assignments, String beanName) {
                BeanReference beanReference = findBeanReference(assignments, beanName);
                if (beanReference != null) {
                        return beanReference.getBean();
                } else {
                        return null;
                }
        }

  final public Token beanName() throws ParseException {
    trace_call("beanName");
    try {
        Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case BEAN_NAME:
        t = jj_consume_token(BEAN_NAME);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                 {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("beanName");
    }
  }

  final public Token property() throws ParseException {
    trace_call("property");
    try {
        Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS_NAME:
        t = jj_consume_token(CLASS_NAME);
        break;
      case PATH_ELEMENT:
        t = jj_consume_token(PATH_ELEMENT);
        break;
      case PROPERTY:
        t = jj_consume_token(PROPERTY);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                     {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("property");
    }
  }

  final public Token className() throws ParseException {
    trace_call("className");
    try {
        Token t = null;
      t = jj_consume_token(CLASS_NAME);
                           {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("className");
    }
  }

  final public Token classPath() throws ParseException {
    trace_call("classPath");
    try {
        Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        t = jj_consume_token(IDENTIFIER);
        break;
      case PATH_ELEMENT:
        t = jj_consume_token(PATH_ELEMENT);
        break;
      case CLASS_PATH:
        t = jj_consume_token(CLASS_PATH);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                       {if (true) return t;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("classPath");
    }
  }

  final public Collection parse() throws ParseException {
    trace_call("parse");
    try {
        Collection assignments = new ArrayList();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION_FOR:
        case INIT_METHOD_FOR:
        case DESTROY_METHOD_FOR:
        case SET_AUTOWIRE_FOR:
        case IMPORT:
        case ALIAS_FOR:
        case IDENTIFIER:
        case CLASS_NAME:
        case PATH_ELEMENT:
        case BEAN_NAME:
        case PROPERTY:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_1;
        }
        if (jj_2_1(2147483647)) {
          dependsOn(assignments);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
          case CLASS_NAME:
          case PATH_ELEMENT:
          case BEAN_NAME:
          case PROPERTY:
            assignment(assignments);
            break;
          case DESCRIPTION_FOR:
            description(assignments);
            break;
          case INIT_METHOD_FOR:
            initMethod(assignments);
            break;
          case DESTROY_METHOD_FOR:
            destroyMethod(assignments);
            break;
          case SET_AUTOWIRE_FOR:
            autowire(assignments);
            break;
          case IMPORT:
            importStatement(assignments);
            break;
          case ALIAS_FOR:
            alias(assignments);
            break;
          default:
            jj_la1[4] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      jj_consume_token(0);
                {if (true) return assignments;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("parse");
    }
  }

  final public void alias(Collection assignments) throws ParseException {
    trace_call("alias");
    try {
        BeanReference beanReference = null;
        String alias = null;
      jj_consume_token(ALIAS_FOR);
      beanReference = findBeanReference(assignments);
      jj_consume_token(41);
      alias = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
                assignments.add(getAlias(beanReference, alias));
    } finally {
      trace_return("alias");
    }
  }

  final public void importStatement(Collection assignments) throws ParseException {
    trace_call("importStatement");
    try {
        Token t = null;
        String classPath = null;
      jj_consume_token(IMPORT);
      t = classPath();
                                   classPath = t.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                try {
                        assignments.addAll(new BeanFactoryLanguageParser(new ClassPathResource(classPath).getInputStream()).parse());
                } catch (IOException e) {
                        {if (true) throw new ParseException(e);}
                }
    } finally {
      trace_return("importStatement");
    }
  }

  final public void description(Collection assignments) throws ParseException {
    trace_call("description");
    try {
        String description = null;
        Bean bean = null;
      jj_consume_token(DESCRIPTION_FOR);
      bean = findBean(assignments);
      jj_consume_token(41);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        description = string();
        break;
      case HERE_STRING_START_OPERATOR:
        description = hereString();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
                bean.setDescription(description);
    } finally {
      trace_return("description");
    }
  }

  final public void initMethod(Collection assignments) throws ParseException {
    trace_call("initMethod");
    try {
        String methodName = null;
        Bean bean = null;
      jj_consume_token(INIT_METHOD_FOR);
      bean = findBean(assignments);
      jj_consume_token(41);
      methodName = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
                bean.setInitMethod(methodName);
    } finally {
      trace_return("initMethod");
    }
  }

  final public void destroyMethod(Collection assignments) throws ParseException {
    trace_call("destroyMethod");
    try {
        String methodName = null;
        Bean bean = null;
      jj_consume_token(DESTROY_METHOD_FOR);
      bean = findBean(assignments);
      jj_consume_token(41);
      methodName = string();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                bean.setDestroyMethod(methodName);
    } finally {
      trace_return("destroyMethod");
    }
  }

  final public void dependsOn(Collection assignments) throws ParseException {
    trace_call("dependsOn");
    try {
        Bean bean = null;
        BeanReference beanReference = null;
        Collection beans = new ArrayList();
      bean = findBean(assignments);
      jj_consume_token(DEPENDS_ON);
      beanReference = findBeanReference(assignments);
                                                         beans.add(beanReference);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 43:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_2;
        }
        jj_consume_token(43);
        beanReference = findBeanReference(assignments);
                                                                     beans.add(beanReference);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
                bean.setDependsOn(beans);
    } finally {
      trace_return("dependsOn");
    }
  }

  final public void autowire(Collection assignments) throws ParseException {
    trace_call("autowire");
    try {
        Bean bean = null;
      jj_consume_token(SET_AUTOWIRE_FOR);
      bean = findBean(assignments);
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NONE:
        jj_consume_token(NONE);
                                          bean.setAutowire("no");
        break;
      case BY_NAME:
        jj_consume_token(BY_NAME);
                                          bean.setAutowire("byName");
        break;
      case BY_TYPE:
        jj_consume_token(BY_TYPE);
                                          bean.setAutowire("byType");
        break;
      case CONSTRUCTOR:
        jj_consume_token(CONSTRUCTOR);
                                  bean.setAutowire("constructor");
        break;
      case AUTODETECT:
        jj_consume_token(AUTODETECT);
                                  bean.setAutowire("autodetect");
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
    } finally {
      trace_return("autowire");
    }
  }

  final public void assignment(Collection assignments) throws ParseException {
    trace_call("assignment");
    try {
        String beanName = null;
        String property = null;
        String propertyName = "";
        Instance instance = null;
        Bean bean = null;
        Token t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
      case BEAN_NAME:
        t = beanName();
                                 beanName = t.image;
        jj_consume_token(41);
        bean = bean(assignments);
                        assignments.add(getBeanReference(bean, beanName));
        break;
      case CLASS_NAME:
      case PATH_ELEMENT:
      case PROPERTY:
        t = property();
                                 property = t.image;
        jj_consume_token(41);
        instance = instance(assignments);
                        beanName = property.substring(0, property.indexOf("."));
                        propertyName = property.substring(property.indexOf(".") + 1, property.length());
                        bean = findBean(assignments, beanName);

                        if (bean != null) {
                                bean.setProperty(propertyName, instance);
                        } else {
                                {if (true) throw new ParseException("Could not find bean named [" + beanName + "] at line " + token.beginLine + ", column " + token.beginColumn + "!");}
                        }
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
        jj_consume_token(42);
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
    } finally {
      trace_return("assignment");
    }
  }

  final public Instance instance(Collection assignments) throws ParseException {
    trace_call("instance");
    try {
        Instance instance = null;
        Collection list = null;
        Map map = null;
        Map properties = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        instance = numberLiteral();
                                             {if (true) return instance;}
        break;
      case STRING:
        instance = stringLiteral();
                                             {if (true) return instance;}
        break;
      case HERE_STRING_START_OPERATOR:
        instance = hereStringLiteral();
                                                 {if (true) return instance;}
        break;
      case NEW:
        instance = bean(assignments);
                                               {if (true) return instance;}
        break;
      case IDENTIFIER:
      case BEAN_NAME:
        instance = beanReference(assignments);
                                                        {if (true) return instance;}
        break;
      case 44:
        jj_consume_token(44);
                  list = new ArrayList();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NEW:
        case NUM:
        case STRING:
        case IDENTIFIER:
        case BEAN_NAME:
        case HERE_STRING_START_OPERATOR:
        case 44:
        case 46:
        case 48:
          instance = instance(assignments);
                                                           list.add(instance);
          label_3:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 43:
              ;
              break;
            default:
              jj_la1[17] = jj_gen;
              break label_3;
            }
            jj_consume_token(43);
            instance = instance(assignments);
                                                                       list.add(instance);
          }
          break;
        default:
          jj_la1[18] = jj_gen;
          ;
        }
        jj_consume_token(45);
                        {if (true) return getLiteralList(list);}
        break;
      case 46:
        jj_consume_token(46);
                  map = new HashMap();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          mapKeyValuePair(assignments, map);
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 43:
              ;
              break;
            default:
              jj_la1[19] = jj_gen;
              break label_4;
            }
            jj_consume_token(43);
            mapKeyValuePair(assignments, map);
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          ;
        }
        jj_consume_token(47);
                        {if (true) return getLiteralMap(map);}
        break;
      case 48:
        jj_consume_token(48);
                  properties = new HashMap();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM:
        case STRING:
          propertiesKeyValuePair(properties);
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 43:
              ;
              break;
            default:
              jj_la1[21] = jj_gen;
              break label_5;
            }
            jj_consume_token(43);
            propertiesKeyValuePair(properties);
          }
          break;
        default:
          jj_la1[22] = jj_gen;
          ;
        }
        jj_consume_token(49);
                        {if (true) return getLiteralProperties(properties);}
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("instance");
    }
  }

  final public void mapKeyValuePair(Collection assignments, Map map) throws ParseException {
    trace_call("mapKeyValuePair");
    try {
        Instance key = null;
        Instance value = null;
      key = stringLiteral();
      jj_consume_token(50);
      value = instance(assignments);
                                                                   map.put(key, value);
    } finally {
      trace_return("mapKeyValuePair");
    }
  }

  final public void propertiesKeyValuePair(Map properties) throws ParseException {
    trace_call("propertiesKeyValuePair");
    try {
        Instance key = null;
        Instance value = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        key = stringLiteral();
        break;
      case NUM:
        key = numberLiteral();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(50);
      value = stringLiteral();
                                                                                         properties.put(key, value);
    } finally {
      trace_return("propertiesKeyValuePair");
    }
  }

  final public Bean bean(Collection assignments) throws ParseException {
    trace_call("bean");
    try {
        boolean isLazy = false;
        boolean isAbstract = false;
        boolean isPrototype = false;
        boolean isChildOf = false;
        BeanReference parent = null;
        Class clazz = null;
        Collection constructorArgs = new ArrayList();
        Instance tmpInstance = null;
      jj_consume_token(NEW);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LAZY:
        jj_consume_token(LAZY);
                   isLazy = true;
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
                       isAbstract = true;
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROTOTYPE:
        jj_consume_token(PROTOTYPE);
                        isPrototype = true;
        break;
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CHILD_OF:
      case IDENTIFIER:
      case BEAN_NAME:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CHILD_OF:
          jj_consume_token(CHILD_OF);
                               isChildOf = true;
          break;
        default:
          jj_la1[28] = jj_gen;
          ;
        }
        parent = beanReference(assignments);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          jj_consume_token(46);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case NUM:
          case STRING:
          case IDENTIFIER:
          case BEAN_NAME:
          case HERE_STRING_START_OPERATOR:
          case 44:
          case 46:
          case 48:
            tmpInstance = instance(assignments);
                                                                              constructorArgs.add(tmpInstance);
            label_6:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 43:
                ;
                break;
              default:
                jj_la1[29] = jj_gen;
                break label_6;
              }
              jj_consume_token(43);
              tmpInstance = instance(assignments);
                                                                                          constructorArgs.add(tmpInstance);
            }
            break;
          default:
            jj_la1[30] = jj_gen;
            ;
          }
          jj_consume_token(47);
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        break;
      case CLASS_NAME:
        clazz = clazz();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 46:
          jj_consume_token(46);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NEW:
          case NUM:
          case STRING:
          case IDENTIFIER:
          case BEAN_NAME:
          case HERE_STRING_START_OPERATOR:
          case 44:
          case 46:
          case 48:
            tmpInstance = instance(assignments);
                                                                              constructorArgs.add(tmpInstance);
            label_7:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 43:
                ;
                break;
              default:
                jj_la1[32] = jj_gen;
                break label_7;
              }
              jj_consume_token(43);
              tmpInstance = instance(assignments);
                                                                                          constructorArgs.add(tmpInstance);
            }
            break;
          default:
            jj_la1[33] = jj_gen;
            ;
          }
          jj_consume_token(47);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                {if (true) return getBean(isLazy, isAbstract, isPrototype, parent, clazz, constructorArgs);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("bean");
    }
  }

  final public BeanReference beanReference(Collection assignments) throws ParseException {
    trace_call("beanReference");
    try {
        String beanName = null;
        BeanReference beanReference = null;
        int beginLine = 0;
        int beginColumn = 0;
        Token t = null;
      t = beanName();
                          beanName = t.image; beginLine = token.beginLine; beginColumn = token.beginColumn;
                beanReference = findBeanReference(assignments, beanName);

                if (beanReference != null) {
                        {if (true) return beanReference;}
                } else {
                        {if (true) throw new ParseException("Could not find parent bean named [" + beanName + "] at line " + beginLine + ", column " + beginColumn + "!");}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("beanReference");
    }
  }

  final public Instance numberLiteral() throws ParseException {
    trace_call("numberLiteral");
    try {
      jj_consume_token(NUM);
                {if (true) return getLiteralValue(token.image);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("numberLiteral");
    }
  }

  final public Instance stringLiteral() throws ParseException {
    trace_call("stringLiteral");
    try {
        String s = null;
      s = string();
                {if (true) return getLiteralValue(s);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("stringLiteral");
    }
  }

  final public Instance hereStringLiteral() throws ParseException {
    trace_call("hereStringLiteral");
    try {
        String s = null;
      s = hereString();
                {if (true) return getLiteralValue(s);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("hereStringLiteral");
    }
  }

  final public Bean findBean(Collection assignments) throws ParseException {
    trace_call("findBean");
    try {
        Token t = null;
        Bean bean = null;
      t = beanName();
                bean = findBean(assignments, t.image);

                if (bean == null) {
                        {if (true) throw new ParseException("Could not find bean named [" + t.image + "] at line " + t.beginLine + ", column " + t.beginColumn + "!");}
                } else {
                        {if (true) return bean;}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("findBean");
    }
  }

  final public BeanReference findBeanReference(Collection assignments) throws ParseException {
    trace_call("findBeanReference");
    try {
        Token t = null;
        BeanReference beanReference = null;
      t = beanName();
                beanReference = findBeanReference(assignments, t.image);

                if (beanReference == null) {
                        {if (true) throw new ParseException("Could not find bean named [" + t.image + "] at line " + t.beginLine + ", column " + t.beginColumn + "!");}
                } else {
                        {if (true) return beanReference;}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("findBeanReference");
    }
  }

  final public String string() throws ParseException {
    trace_call("string");
    try {
        StringBuffer sb = new StringBuffer();
      jj_consume_token(STRING);
                sb.append(StringUtils.replace(token.image.substring(1, token.image.length() - 1), "\\'", "'"));
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_8;
        }
        jj_consume_token(51);
        jj_consume_token(STRING);
                sb.append(StringUtils.replace(token.image.substring(1, token.image.length() - 1), "\\'", "'"));
      }
                {if (true) return sb.toString();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("string");
    }
  }

  final public String hereString() throws ParseException {
    trace_call("hereString");
    try {
      jj_consume_token(HERE_STRING_START_OPERATOR);
      jj_consume_token(HERE_STRING_START_TOKEN);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HERE_STRING_TOKEN1:
        case HERE_STRING_TOKEN2:
        case HERE_STRING_NEW_LINE_TOKEN:
        case HERE_STRING_CONTINUE_TOKEN:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_9;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case HERE_STRING_TOKEN1:
          jj_consume_token(HERE_STRING_TOKEN1);
          break;
        case HERE_STRING_TOKEN2:
          jj_consume_token(HERE_STRING_TOKEN2);
          break;
        case HERE_STRING_NEW_LINE_TOKEN:
          jj_consume_token(HERE_STRING_NEW_LINE_TOKEN);
          break;
        case HERE_STRING_CONTINUE_TOKEN:
          jj_consume_token(HERE_STRING_CONTINUE_TOKEN);
          break;
        default:
          jj_la1[38] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(HERE_STRING_END_TOKEN);
                {if (true) return token_source.getHereStringText();}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("hereString");
    }
  }

  final public Class clazz() throws ParseException {
    trace_call("clazz");
    try {
        Token t = null;
      t = className();
                try {
                        if (getClassLoader() != null) {
                                {if (true) return Class.forName(t.image, true, getClassLoader());}
                        } else {
                                {if (true) return Class.forName(t.image);}
                        }
                } catch (ClassNotFoundException e) {
                        {if (true) throw new ParseException("Could not load class [" + t.image + "] at line " + t.beginLine + ", column " + t.beginColumn + "!");}
                }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("clazz");
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) return true;
    }
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(DEPENDS_ON)) return true;
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(42)) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_14()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  public BeanFactoryLanguageParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x84000000,0x60000000,0x44000000,0xe4c0b800,0xe4c0b800,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x3e0000,0x0,0xe4000000,0x0,0x0,0x87000040,0x0,0x2000000,0x0,0x3000000,0x87000040,0x3000000,0x400,0x80,0x200,0x100,0x0,0x87000040,0x0,0x0,0x87000040,0x0,0xa4000100,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x1,0x4,0x1,0x1,0x400,0x400,0x2,0x400,0x400,0x400,0x800,0x400,0x0,0x400,0x1,0x400,0x800,0x15002,0x800,0x0,0x800,0x0,0x15002,0x0,0x0,0x0,0x0,0x0,0x800,0x15002,0x4000,0x800,0x15002,0x4000,0x0,0x80000,0x170,0x170,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public BeanFactoryLanguageParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BeanFactoryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BeanFactoryLanguageParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new BeanFactoryLanguageParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public BeanFactoryLanguageParser(BeanFactoryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(BeanFactoryLanguageParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[52];
    for (int i = 0; i < 52; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

  final public void enable_tracing() {
    trace_enabled = true;
  }

  final public void disable_tracing() {
    trace_enabled = false;
  }

  final private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  final private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  final private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(">" + where);
    }
  }

  final private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
