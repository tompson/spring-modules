<?xml version="1.0" encoding="UTF-8"?>
<chapter id="hivemind">
  <title>Hivemind Integration</title>

  <sect1>
    <title>Introduction</title>

    <para>Hivemind is lightweight container providing IoC capabilities similar
    to Spring. More information about HiveMind can be found at: <ulink
    url="???">http://jakarta.apache.org/hivemind</ulink>.</para>
  </sect1>

  <sect1>
    <title>Configure an Hivemind <literal>Registry</literal></title>

    <para>In HiveMind, the <literal>Registry</literal> is the central location
    from which your application can gain access to services and configuration
    data. The <literal>RegistryFactoryBean</literal> allows for a HiveMind
    <literal>Registry</literal> to be configured and started within the Spring
    ApplicationContext:</para>

    <para>There are two ways configure this <literal>Registry</literal> with
    the <literal>RegistryFactoryBean</literal> class:</para>

    <itemizedlist>
      <listitem>
        <para>No configuration location is specified. In this case, Hivemind
        looks for an XML file named hivemodule.xml in the META-INF
        directory.</para>
      </listitem>

      <listitem>
        <para>One or more configuration file locations are specified. In this
        case, Spring Modules will use these configuration files to configure
        <literal>Registry</literal> instance.</para>
      </listitem>
    </itemizedlist>

    <para>The code below shows how to configure a
    <literal>RegistryFactoryBean</literal> that loads
    <literal>Registry</literal> configuration from a file called
    configuration.xml:</para>

    <programlisting>&lt;bean id="hivemindRegistry" class="org.springmodules.hivemind.RegistryFactoryBean"&gt;
  &lt;property name="configLocations"&gt;
    &lt;value&gt;configuration.xml&lt;/value&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>

    <para>The <literal>RegistryFactoryBean</literal> uses Spring's resource
    abstraction layer allowing you to specify any valid Spring
    <literal>Resource</literal> path for the configLocations property.</para>
  </sect1>

  <sect1>
    <title>Exposing HiveMind Services as Spring Beans</title>

    <para>Using the <literal>ServiceFactoryBean</literal> it i spossible to
    expose any service defined in a HiveMind <literal>Registry</literal> to
    your application as a Spring bean. This can be desirable if you want to
    make use of features found in both products but you want your application
    to code only to one.</para>

    <para>The ServiceFactoryBean class requires access to a HiveMind
    <literal>Registry</literal>, and as such, you generally need to configure
    both a <literal>RegistryFactoryBean</literal> and a
    <literal>ServiceFactoryBean</literal> as shown below:</para>

    <programlisting>&lt;bean id="registry" class="org.springmodules.hivemind.RegistryFactoryBean"&gt;
  &lt;property name="configLocations"&gt;
    &lt;value&gt;configuration.xml&lt;/value&gt;
  &lt;/property&gt;
&lt;/bean&gt;

&lt;bean id="sampleService" class="org.springmodules.hivemind.ServiceFactoryBean"&gt;
  &lt;property name="registry"&gt;
    &lt;ref local="registry"/&gt;
  &lt;/property&gt;
  &lt;property name="serviceInterface"&gt;
    &lt;value&gt;org.springmodules.samples.hivemind.service.ISampleService&lt;/value&gt;
  &lt;/property&gt;
  &lt;property name="serviceName"&gt;
    &lt;value&gt;interfaces.SampleService&lt;/value&gt;
  &lt;/property&gt;
&lt;/bean&gt;</programlisting>

    <para>Whether you define both <literal>serviceInterface</literal> and
    <literal>serviceName</literal> or just <literal>serviceInterface</literal>
    depends on how your HiveMind <literal>Registry</literal> is configured.
    Consult the HiveMind documentation for more details on how HiveMind
    services are identified and accessed.</para>
  </sect1>
</chapter>