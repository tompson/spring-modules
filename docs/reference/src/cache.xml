<?xml version="1.0" encoding="UTF-8"?>
<chapter id="cache">
  <title>Caching</title>

  <sect1 id="cache-introduction">
    <title>Introduction</title>

    <para>The <emphasis>Caching Module</emphasis> provides a consistent
    abstraction for caching, delivering the following benefits.</para>

    <itemizedlist>
      <listitem>
        <para>Declarative caching services are powered by <ulink
        url="http://www.springframework.org/docs/reference/aop.html">Spring
        AOP</ulink> and enabled by these two advices.</para>

        <orderedlist>
          <listitem>
            <para><literal>org.springmodules.cache.interceptor.caching.CachingInterceptor</literal>.
            Stores in the cache the return values of the advised
            methods.</para>
          </listitem>

          <listitem>
            <para><literal>org.springmodules.cache.interceptor.flush.CacheFlushInterceptor</literal>.
            Flushes the cache or parts of the cache before or after executing
            the advised methods.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>Caching services can be defined completely in the Spring
        configuration file. Optionally, caching services can be enabled using
        source-level metadata, providing a similar programming model to
        Microsoft's .Net <literal>ServicedComponents</literal>.</para>
      </listitem>

      <listitem>
        <para>Entry keys stored in the cache are automatically generated by 
        combining the hash codes of the advised method and its
        arguments. Custom key generators can be created by implementing the
        interface
        <literal>org.springmodules.cache.key.CacheKeyGenerator</literal>.</para>
      </listitem>

      <listitem>
        <para>Users may choose a cache provider that best suites the
        needs of their particular project. The supported cache providers
        are:</para>

        <orderedlist>
          <listitem>
            <para><ulink
            url="http://ehcache.sourceforge.net/">EHCache</ulink>.</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://jakarta.apache.org/jcs/">JCS</ulink>.</para>
          </listitem>

          <listitem>
            <para><ulink
            url="http://www.opensymphony.com/oscache">OSCache</ulink>.</para>
          </listitem>
        </orderedlist>
      </listitem>

      <listitem>
        <para>The <emphasis>Caching Module</emphasis> may be easily extended
        to support additional cache providers.</para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="cache-uses">
    <title>Uses</title>

    <para>Caching is frequently used to improve application performance. A
    good example is the caching of data retrieved from a database. Even
    though ORM frameworks such as <ulink
    url="http://www.ibatis.com/">iBATIS</ulink> and <ulink
    url="http://www.hibernate.org/">Hibernate</ulink> already provide built-in
    caching, the <emphasis>Caching Module</emphasis> can be useful
    when executing methods that perform heavy calculations, are time consuming,
    and/or are resource hungry.</para>

	<para>Caching can be added to frameworks without inherent caching support, 
	such as JDBC or 
	<ulink url="http://www.springframework.org/docs/reference/jdbc.html">Spring
    JDBC</ulink>.</para>

	<para>The <emphasis>Caching Module</emphasis> may be used to have more
	control over your caching provider.</para>

  </sect1>

  <sect1>
    <title>Configuration</title>

    <para>Caching and cache-flushing can be easily configured by following the
    following steps.</para>

    <orderedlist>
      <listitem>
        <para><emphasis role="bold">Set up the cache provider.</emphasis>
        Instead of imposing the use of a particular cache implementation, the
        <emphasis>Caching Module</emphasis> lets you choose a cache provider
        that best suites the needs of your project.</para>
      </listitem>

      <listitem>
        <para><emphasis role="bold">Enable the caching services.</emphasis>
        The <emphasis>Caching Module</emphasis> provides two ways to enable
        the caching services.</para>

        <orderedlist>
          <listitem>
            <para>Declarative caching services (via Spring AOP).</para>
          </listitem>

          <listitem>
            <para>Programmatic use (via a single interface,
            <literal>org.springmodules.cache.provider.CacheProviderFacade</literal>).</para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>

    <sect2 id="cache-setup-provider">
      <title>Set up the Cache Provider</title>

      <para>The <emphasis>Caching Module</emphasis> provides a common
      interface that centralizes the interactions with the
      underlying cache provider. Each facade must implement the interface
      <literal>org.springmodules.cache.provider.CacheProviderFacade</literal>
      or subclass the template
      <literal>org.springmodules.cache.provider.AbstractCacheProviderFacadeImpl</literal>.</para>

      <para>All the provided facades have these common properties.</para>

      <orderedlist>
        <listitem>
          <para><emphasis role="bold"><literal>cacheManager</literal>
          (required)</emphasis>. A cache manager administrates the cache. In
          general, a cache manager should be able to:</para>

          <itemizedlist>
            <listitem>
              <para>Store objects in the cache.</para>
            </listitem>

            <listitem>
              <para>Retrieve objects from the cache.</para>
            </listitem>

            <listitem>
              <para>Remove objects from the cache.</para>
            </listitem>

            <listitem>
              <para>Flush or invalidate the cache.</para>
            </listitem>
          </itemizedlist>

          <para>The cache manager can be replaced by a factory that creates a
          singleton instance of the cache manager. Such factory allows custom
          configuration of the cache manager (depending on the cache provider)
          and ensures that the Spring container shuts down the cache manager
          when the factory is destroyed by the
          <literal>BeanFactory</literal>.</para>

          <para>The <emphasis>Caching Module</emphasis> supplies factories for
          the supported cache providers. (with the exception of EHCache, which
          is provided by the <emphasis role="bold">Spring
          Framework</emphasis>). Each factory may subclass
          <literal>org.springmodules.cache.provider.AbstractSingletonCacheManagerFactoryBean</literal>
          or,
          <literal>org.springmodules.cache.provider.AbstractConfigurationResourceCacheManagerFactoryBean</literal>
          if the factory uses a configuration file to create the cache
          manager.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold"><literal>cacheProfiles</literal>
          (required).</emphasis> A cache profile tells the cache provider how
          to cache objects and how to flush the cache. Cache profiles can be
          defined as a:</para>

          <itemizedlist>
            <listitem>
              <para><emphasis
              role="bold"><literal>java.util.Map</literal>.</emphasis> This is
              the conventional way of setting up a map as a property of a bean
              definition. Since each entry of the map must be defined as a
              bean, we could end up with an excessively long and verbose
              configuration file.</para>
            </listitem>

            <listitem>
              <para><emphasis
              role="bold"><literal>java.util.Properties</literal>.</emphasis>
              This is an alternative, simplified way to set up the cache
              profiles. Each cache profile is defined as a string of the form
              "<literal>[propertyName1=propertyValue1][propertyName2=propertyValue2]</literal>"
              where each of the properties of the cache profile is specified
              between brackets. The fully qualified class name is not
              necessary because the facade chooses the class of the cache
              profile that is suitable for the chosen cache provider</para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para><emphasis role="bold"><literal>failQuietlyEnabled</literal>
          (optional).</emphasis> Indicates if an exception should thrown or
          not when an error occurrs when accessing the cache. The default
          value is <literal>false.</literal></para>
        </listitem>
      </orderedlist>

      <sect3>
        <title>EHCache</title>

        <para><programlisting>&lt;bean id="cacheManager"
    class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"&gt;
&lt;/bean&gt;</programlisting></para>

        <para>The cache manager is a singleton instance of
        <literal>net.sf.ehcache.CacheManager</literal> created by the bean
        factory
        <literal>org.springframework.cache.ehcache.EhCacheManagerFactoryBean</literal>.</para>

        <para><emphasis>Please refer to the <ulink
        url="http://ehcache.sourceforge.net/documentation/">EHCache
        documentation</ulink> for more information. Also, Omar Irbouh wrote an
        <ulink
        url="http://opensource.atlassian.com/confluence/spring/display/DISC/Caching+the+result+of+methods+using+Spring+and+EHCache">interesting
        article</ulink> about using EHCache with Spring.</emphasis></para>

        <para><programlisting>&lt;bean id="cacheProvider"
    class="org.springmodules.cache.provider.ehcache.EhcacheFacade"&gt;
    &lt;property name="cacheManager" ref="cacheManager" /&gt;

    &lt;!-- Cache profiles specified as a java.util.Map --&gt;
    &lt;property name="cacheProfiles"&gt;
        &lt;map&gt;
            &lt;entry key="test"&gt;
                &lt;bean class="org.springmodules.cache.provider.ehcache.EhcacheCacheProfile"&gt;
                    &lt;property name="cacheName" value="testCache" /&gt;&lt;!-- Required --&gt;
                &lt;/bean&gt;
            &lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;

    &lt;!-- Same cache profiles specified as a java.util.Properties --&gt;
    &lt;property name="cacheProfiles"&gt;
        &lt;props&gt;
            &lt;prop key="test"&gt;[cacheName=testCache]&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>
      </sect3>

      <sect3>
        <title>JCS</title>

        <para><programlisting>&lt;bean id="cacheManager"
    class="org.springmodules.cache.provider.jcs.JcsCacheManagerFactoryBean"&gt;
&lt;/bean&gt;</programlisting></para>

        <para>The cache manager is a singleton instance of
        <literal>org.apache.jcs.engine.control.CompositeCacheManager</literal>
        created by the bean factory
        <literal>org.springmodules.cache.provider.jcs.JcsCacheManagerFactoryBean</literal>.</para>

        <para><emphasis>Please refer to the <ulink
        url="http://jakarta.apache.org/jcs/">JCS documentation</ulink> for
        more information.</emphasis></para>

        <para><programlisting>&lt;bean id="cacheProvider"
    class="org.springmodules.cache.provider.jcs.JcsFacade"&gt;
    &lt;property name="cacheManager" ref="cacheManager" /&gt;

    &lt;!-- Cache profiles specified as a java.util.Map --&gt;
    &lt;property name="cacheProfiles"&gt;
        &lt;map&gt;
            &lt;entry key="test"&gt;
                &lt;bean class="org.springmodules.cache.provider.jcs.JcsCacheProfile"&gt;
                    &lt;property name="cacheName" value="testCache" /&gt;&lt;!-- Required --&gt;
                    &lt;property name="group" value="testGroup" /&gt;&lt;!-- Optional --&gt;
                &lt;/bean&gt;
            &lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;

    &lt;!-- Same cache profiles specified as a java.util.Properties --&gt;
    &lt;property name="cacheProfiles"&gt;
        &lt;props&gt;
            &lt;prop key="test"&gt;[cacheName=testCache][group=testGroup]&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>
      </sect3>

      <sect3>
        <title>OSCache</title>

        <para><programlisting>&lt;bean id="cacheManager"
    class="org.springmodules.cache.provider.oscache.OscacheManagerFactoryBean"&gt;
&lt;/bean&gt;</programlisting></para>

        <para>The cache manager is a singleton instance of
        <literal>com.opensymphony.oscache.general.GeneralCacheAdministrator</literal>
        created by the bean factory
        <literal>org.springmodules.cache.provider.oscache.OscacheManagerFactoryBean</literal>.</para>

        <para><emphasis>Please refer to the <ulink
        url="http://www.opensymphony.com/oscache/wiki/Documentation.html">OSCache
        documentation</ulink> for more information. Rob Harrop posted
        in the <ulink
        url="http://opensource.atlassian.com/confluence/spring/display/INTEGRATE/OSCache">Spring
        Wiki</ulink> a much simpler way to set up OSCache with Spring.</emphasis></para>

        <para><programlisting>&lt;bean id="cacheProvider"
    class="org.springmodules.cache.provider.oscache.OscacheFacade"&gt;
    &lt;property name="cacheManager" ref="cacheManager" /&gt;

    &lt;!-- Cache profiles specified as a java.util.Map --&gt;
    &lt;property name="cacheProfiles"&gt;
        &lt;map&gt;
            &lt;entry key="test"&gt;
                &lt;bean class="org.springmodules.cache.provider.oscache.OscacheCacheProfile"&gt;
                    &lt;property name="cronExpression" value="* * * * *" /&gt;&lt;!-- Optional --&gt;
                    &lt;property name="groups" value="group1,group2" /&gt;&lt;!-- Optional --&gt;
                    &lt;property name="refreshPeriod" value="600" /&gt;&lt;!-- Optional --&gt;
                &lt;/bean&gt;
            &lt;/entry&gt;
        &lt;/map&gt;
    &lt;/property&gt;
    
    &lt;!-- Same cache profiles specified as a java.util.Properties --&gt;
    &lt;property name="cacheProfiles"&gt;
        &lt;props&gt;
            &lt;prop key="test"&gt;[cronExpression=* * * * *][groups=group1,group2][refreshPeriod=600]&lt;/prop&gt;
        &lt;/props&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting></para>
      </sect3>
    </sect2>

    <sect2>
      <title>Declarative Caching Services</title>

      <para>The <emphasis>Caching Module</emphasis> provides different ways to
      create proxies to enable the caching services:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Proxy Factory.</emphasis> The factory
          <literal>org.springmodules.cache.interceptor.proxy.CacheProxyFactoryBean</literal>
          creates a proxy for a single bean definition. By using the proxy
          factory all the configuration details for the caching services are
          declared in the Spring configuration file.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Metadata-driven Autoproxy.</emphasis>
          Autoproxying is driven by metadata. This produces a similar
          programming model to Microsoft's .Net 
          <literal>ServicedComponents</literal>. 
          Proxies for caching services are created automatically for the bean
          definition(s) containing source-level metadata. The 
          <emphasis>Caching Module</emphasis> supports metadata provided
          by <ulink url="http://jakarta.apache.org/commons/attributes/">Commons-Attributes</ulink> 
          and JDK 1.5+ Annotations.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Single
          <literal>MethodInterceptor</literal>.</emphasis> A single
          <literal>MethodInterceptor</literal> is used to proxy one or more
          bean definitions.</para>
        </listitem>
      </itemizedlist>

      <sect3>
        <title>Proxy Factory</title>

        <para>We are going to use EHCache as our cache provider:</para>

        <programlisting> 1 &lt;bean id="cacheProvider"
 2    class="org.springmodules.cache.provider.ehcache.EhcacheFacade"&gt;
 3    &lt;property name="cacheManager" ref="cacheManager" /&gt;
 4
 5    &lt;!-- Cache profiles specified as a java.util.Properties --&gt;
 6    &lt;property name="cacheProfiles"&gt;
 7        &lt;props&gt;
 8            &lt;prop key="first"&gt;[cacheName=firstCache]&lt;/prop&gt;
 9            &lt;prop key="second"&gt;[cacheName=secondCache]&lt;/prop&gt;
10         &lt;/props&gt;
11     &lt;/property&gt;
12 &lt;/bean&gt;</programlisting>

        <para>Now we need to set up the proxy factory,
        <literal>CacheProxyFactoryBean</literal>:</para>

        <para><programlisting>13 &lt;bean id="cacheable"
14     class="org.springmodules.cache.interceptor.proxy.CacheProxyFactoryBean"&gt;
15     &lt;property name="cacheProviderFacade" ref="cacheProvider" /&gt;
16     &lt;property name="cachingAttributes"&gt;
17         &lt;props&gt;
18             &lt;!-- We are going to cache the return value of the methods which names start with "get" --&gt;
19             &lt;prop key="get*"&gt;[cacheProfileId=first]&lt;/prop&gt;
20         &lt;/props&gt;
21     &lt;/property&gt;
22     &lt;property name="cacheFlushAttributes"&gt;
23         &lt;props&gt;
24             &lt;!-- We are going to flush the cache when the methods which names start with "update" are executed --&gt;
25             &lt;prop key="update*"&gt;[cacheProfileIds=first,second][flushBeforeExecution=true]&lt;/prop&gt;
26         &lt;/props&gt;
27     &lt;/property&gt;
28     &lt;property name="target"&gt;
29         &lt;!-- The bean to proxy --&gt;
30         &lt;bean class="org.springmodules.cache.integration.CacheableImpl"&gt;
31             &lt;property name="names"&gt;
32                 &lt;list&gt;
33                     &lt;value&gt;James Gosling&lt;/value&gt;
34                 &lt;/list&gt;
35             &lt;/property&gt;
36        &lt;/bean&gt;
37     &lt;/property&gt;
38 &lt;/bean&gt;</programlisting></para>

        <para>On line 19 we are telling the proxy factory to store in the
        cache "firstCache" the return value of the methods that start with
        "get". The id "first" is a reference to the cache profile defined on
        line 8.</para>

        <para>On line 25 we are telling the proxy factory to flush the caches
        "firstCache" and "secondCache" <emphasis>after</emphasis> the methods
        that start with "update" are executed. The ids "first" and "second"
        are references to the cache profiles defined on lines 8 and 9
        respectively.</para>
      </sect3>

      <sect3>
        <title>Metadata-driven Autoproxy with Commons-Attributes</title>

        <para>We are going to use JCS as our cache provider:</para>

        <para><programlisting> 1 &lt;bean id="cacheProvider"
 2     class="org.springmodules.cache.provider.jcs.JcsFacade"&gt;
 3     &lt;property name="cacheManager" ref="cacheManager" /&gt;
 4
 5     &lt;!-- Cache profiles specified as a java.util.Properties --&gt;
 6     &lt;property name="cacheProfiles"&gt;
 7         &lt;props&gt;
 8             &lt;prop key="first"&gt;[cacheName=firstCache][group=aGroup]&lt;/prop&gt;
 9             &lt;prop key="second"&gt;[cacheName=secondCache][group=anotherGroup]&lt;/prop&gt;
10         &lt;/props&gt;
11     &lt;/property&gt;
12 &lt;/bean&gt;</programlisting></para>

        <para><ulink
        url="http://www.springframework.org/docs/reference/aop.html#aop-autoproxy">Autoproxy</ulink>
        lets Spring "automagically" proxy bean definitions:</para>

        <programlisting>&lt;bean id="autoproxy"
    class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" /&gt;</programlisting>

        <para>The metadata processor retrieves the source-level metadata which
        specifies the methods of the bean definitions that should be part of
        the caching services:</para>

        <programlisting>&lt;bean id="attributes"
    class="org.springframework.metadata.commons.CommonsAttributes" /&gt;</programlisting>

        <para>The caching advisor tells "autoproxy" to create proxies only for
        the bean definitions containing source-level metadata for
        caching:</para>

        <programlisting>&lt;bean id="cachingAttributeSource"
    class="org.springmodules.cache.interceptor.caching.MetadataCachingAttributeSource"&gt;
    &lt;property name="attributes" ref="attributes" /&gt;
&lt;/bean&gt;

&lt;bean id="cachingInterceptor"
    class="org.springmodules.cache.interceptor.caching.CachingInterceptor"&gt;
    &lt;property name="cacheProviderFacade" ref="cacheProvider" /&gt;
    &lt;property name="cachingAttributeSource" ref="cachingAttributeSource" /&gt;
&lt;/bean&gt;

&lt;bean id="cachingAttributeSourceAdvisor"
    class="org.springmodules.cache.interceptor.caching.CachingAttributeSourceAdvisor"&gt;
    &lt;constructor-arg ref="cachingInterceptor" /&gt;
&lt;/bean&gt;</programlisting>

        <para>The cache-flush advisor tells "autoproxy" to create proxies only
        for the bean definitions containing source-level metadata for flushing
        the cache:</para>

        <programlisting>&lt;bean id="cacheFlushAttributeSource"
    class="org.springmodules.cache.interceptor.flush.MetadataCacheFlushAttributeSource"&gt;
    &lt;property name="attributes" ref="attributes" /&gt;
&lt;/bean&gt;

&lt;bean id="cacheFlushInterceptor"
    class="org.springmodules.cache.interceptor.flush.CacheFlushInterceptor"&gt;
    &lt;property name="cacheProviderFacade" ref="cacheProvider" /&gt;
    &lt;property name="cacheFlushAttributeSource" ref="cacheFlushAttributeSource" /&gt;
&lt;/bean&gt;

&lt;bean id="cacheFlushAttributeSourceAdvisor"
    class="org.springmodules.cache.interceptor.flush.CacheFlushAttributeSourceAdvisor"&gt;
    &lt;constructor-arg ref="cacheFlushInterceptor" /&gt;
&lt;/bean&gt;</programlisting>

        <para>Now we define the bean(s) to proxy:</para>

        <programlisting>47 &lt;bean id="cacheable"
48     class="org.springmodules.cache.integration.CacheableImpl"&gt;
49     &lt;property name="names"&gt;
50         &lt;list&gt;
51             &lt;value&gt;James Gosling&lt;/value&gt;
52         &lt;/list&gt;
53     &lt;/property&gt;
54 &lt;/bean&gt;</programlisting>

        <para>The defined beans must have source-level metadata attributes for
        caching and flushing the cache in order to be proxied. The following
        is the source code of the bean defined on line 47:</para>

        <programlisting>100 /**
101  * @see Cacheable#getName(int)
102  * 
103  * @@org.springmodules.cache.interceptor.caching.Cached(cacheProfileId="first")
104  */
105 public String getName(int index) {
106    return (String) this.names.get(index);
107 }
108
109 /**
110  * @see Cacheable#getName(int)
111  * 
112  * @@org.springmodules.cache.interceptor.flush.FlushCache(cacheProfileIds="first,second",flushBeforeExecution="true")
113  */
114 public void updateName(int index, String name) {
115     this.names.set(index, name);
116 }</programlisting>

        <para>On line 103 of the Java source we are telling the caching
        advisor to store in the group "aGroup" of the cache "firstCache" the
        return value of the method "<literal>getName(int)</literal>." The id
        "first" is a reference to the cache profile defined on line 8 of the
        Spring configuration file.</para>

        <para>On line 112 of the Java source we are telling the cache-flush
        advisor to flush the entries in the group "aGroup" of the cache
        "firstCache" and the entries of the group "anotherGroup" of the cache
        "secondCache" <emphasis>after</emphasis> the method
        "<literal>updateName(int, String)</literal>" is executed. The ids
        "first" and "second" are references to the cache profiles defined on
        lines 8 and 9 of the Spring configuration file respectively.</para>
        
      </sect3>

      <sect3>
        <title>Reusing a single MethodInterceptor</title>

        <para>We are going to use OSCache as our cache provider:</para>

        <para><programlisting> 1 &lt;bean id="cacheProvider"
 2     class="org.springmodules.cache.provider.oscache.OscacheFacade"&gt;
 3     &lt;property name="cacheManager" ref="cacheManager" /&gt;
 4
 5     &lt;!-- Cache profiles specified as a java.util.Properties --&gt;
 6     &lt;property name="cacheProfiles"&gt;
 7         &lt;props&gt;
 8            &lt;prop key="first"&gt;[cronExpression=* * * * *][groups=firstGroup][refreshPeriod=600]&lt;/prop&gt;
 9            &lt;prop key="second"&gt;[groups=secondGroup]&lt;/prop&gt;
10         &lt;/props&gt;
11     &lt;/property&gt;
12 &lt;/bean&gt;</programlisting></para>

        <para>We need to register custom <literal>PropertyEditor</literal>s in
        Spring:</para>

        <programlisting>13 &lt;bean
14     class="org.springframework.beans.factory.config.CustomEditorConfigurer"&gt;
15     &lt;property name="customEditors"&gt;
16         &lt;map&gt;
17             &lt;entry  
18                 key="org.springmodules.cache.interceptor.caching.CachingAttributeSource" &gt;
19                 &lt;bean  
20                     class="org.springmodules.cache.interceptor.caching.CachingAttributeSourceEditor" /&gt;
21             &lt;/entry&gt;
22             &lt;entry  
23                 key="org.springmodules.cache.interceptor.caching.CacheFlushAttributeSource" &gt;
24                 &lt;bean  
25                     class="org.springmodules.cache.interceptor.caching.CacheFlushAttributeSourceEditor" /&gt;
26             &lt;/entry&gt;
27         &lt;/map&gt;
28     &lt;/property&gt;
29 &lt;/bean&gt;</programlisting>

        <para>Now it is possible to use a single
        <literal>CachingInterceptor</literal> and
        <literal>CacheFlushInterceptor</literal> to many beans and have a full
        control of the methods to advise:</para>

        <programlisting>30 &lt;bean id="cachingInterceptor"
31     class="org.springmodules.cache.interceptor.caching.CachingInterceptor"&gt;
32     &lt;property name="cacheProviderFacade" ref="cacheProvider" /&gt;
33     &lt;property name="cachingAttributeSource"&gt;
34         org.springmodules.cache.integration.CacheableImpl.get*=[cacheProfileId=first]
35     &lt;/property&gt;
36 &lt;/bean&gt;
37
38 &lt;bean id="cacheFlushInterceptor"
39     class="org.springmodules.cache.interceptor.caching.CacheFlushInterceptor"&gt;
40     &lt;property name="cacheProviderFacade" ref="cacheProvider" /&gt;
41     &lt;property name="cacheFlushAttributeSource"&gt;
42         org.springmodules.cache.integration.CacheableImpl.update*=[cacheProfileIds=first,second][flushBeforeExecution=true]
43     &lt;/property&gt;
44 &lt;/bean&gt;</programlisting>

        <para>On line 34 we are telling the caching interceptor to store in
        the group "firstGroup" (with the cron expression "* * * * *" and the
        refresh period of 600 seconds) the return value of the methods that
        start with "get" of a bean of class
        <literal>org.springmodules.cache.integration.CacheableImpl</literal>.
        The id "first" is a reference to the cache profile defined on line
        8.</para>

        <para>On line 42 we are telling the cache-flush interceptor to flush
        the groups "firstGroup" and "secondGroup" <emphasis>after</emphasis>
        the methods that start with "update" of a bean of class
        <literal>org.springmodules.cache.integration.CacheableImpl</literal>
        are executed. The ids "first" and "second" are references to the cache
        profiles defined on lines 8 and 9 respectively.</para>

        <para>Now we need to proxy the bean(s):</para>

        <programlisting>&lt;!-- Auto proxy --&gt;
&lt;bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;
    &lt;property name="beanNames" value="cacheable" /
    &lt;property name="interceptorNames"&gt;
        &lt;list&gt;
            &lt;value&gt;cachingInterceptor&lt;/value&gt;
            &lt;value&gt;cacheFlushInterceptor&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;

&lt;!-- Bean to proxy --&gt;
&lt;bean id="cacheable"
    class="org.springmodules.cache.integration.CacheableImpl"&gt;
    &lt;property name="names"&gt;
        &lt;list&gt;
            &lt;value&gt;James Gosling&lt;/value&gt;
        &lt;/list&gt;
    &lt;/property&gt;
&lt;/bean&gt;</programlisting>
      </sect3>
    </sect2>
    
    <sect2>
    	<title>Programmatic Use</title>
    	
        <para>We are going to use EHCache as our cache provider:</para>

        <programlisting> 1 &lt;bean id="cacheProvider"
 2    class="org.springmodules.cache.provider.ehcache.EhcacheFacade"&gt;
 3    &lt;property name="cacheManager" ref="cacheManager" /&gt;
 4
 5    &lt;!-- Cache profiles specified as a java.util.Properties --&gt;
 6    &lt;property name="cacheProfiles"&gt;
 7        &lt;props&gt;
 8            &lt;prop key="first"&gt;[cacheName=firstCache]&lt;/prop&gt;
 9            &lt;prop key="second"&gt;[cacheName=secondCache]&lt;/prop&gt;
10         &lt;/props&gt;
11     &lt;/property&gt;
12 &lt;/bean&gt;</programlisting>

		<para>Obtain a reference to the cache provider (the bean "cacheProvider"
		in our example), which should be an implementation of the interface 
		<literal>org.springmodules.cache.provider.CacheProviderFacade</literal>.
		This interface exposes the following methods:</para>
		
		<programlisting>
void cancelCacheUpdate(Serializable cacheKey);

void flushCache(String[] cacheProfileIds);

Object getFromCache(Serializable cacheKey, String cacheProfileId) throws EntryRetrievalException;

boolean isFailQuietlyEnabled();

void putInCache(Serializable cacheKey, String cacheProfileId, Object objectToCache);

void removeFromCache(Serializable cacheKey, String cacheProfileId);</programlisting>
    </sect2>
  </sect1>
</chapter>