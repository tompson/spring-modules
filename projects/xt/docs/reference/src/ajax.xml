<sect1 id="ajax"><title>Spring Modules XT Ajax Framework</title>

    <sect2 id='ajax-intro'><title id='ajax-intro-title'>Introduction</title>
        <para>The Spring Modules XT Ajax Framework is based on the following fundamental concepts:
        </para>
        <itemizedlist>
            <listitem>
                <para>Events
                </para>
            </listitem>
            <listitem>
                <para>Handlers
                </para>
            </listitem>
            <listitem>
                <para>Actions
                </para>
            </listitem>
            <listitem>
                <para>Components
                </para>
            </listitem>
            <listitem>
                <para>Responses
                </para>
            </listitem>
        </itemizedlist>
        <para>They work together in a simple processing flow:
        </para>
        <orderedlist>
            <listitem>
                <para>Web pages fire <emphasis role='bold'>events</emphasis> using standard <ulink url='http://www.w3schools.com/js/js_events.asp'><citetitle>JavaScript events</citetitle></ulink>.
                </para>
            </listitem>
            <listitem>
                <para>Each event causes an Ajax request that is processed by simple Java objects acting as server side <emphasis role='bold'>handlers</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>The handler manage the event creating <emphasis role='bold'>actions</emphasis>.
                </para>
            </listitem>
            <listitem>
                <para>Each action may render one or more HTML <emphasis role='bold'>components</emphasis> in the page.
                </para>
            </listitem>
            <listitem>
                <para>At the end, actions are canalised into an Ajax <emphasis role='bold'>response</emphasis> sent back to the web page.
                </para>
            </listitem>
        </orderedlist>
        <para>We'll take a more detailed look to each of the concepts above.
        </para>
    </sect2>
    <sect2 id='ajax-events'><title id='ajax-events-title'>Ajax Events</title>
        <para>In Spring Modules XT Ajax framework you can raise events from your web pages as standard <ulink url='http://www.w3schools.com/js/js_events.asp'><citetitle>JavaScript events</citetitle></ulink>, and handle them server side.
            There are actually the following types of Ajax events: 
        </para>
        <itemizedlist>
            <listitem>
                <para><emphasis role='bold'>Action events</emphasis>, a generic event type directly handled by configured <link linkend="ajax-handlers">handlers</link> <emphasis role='bold'>without</emphasis> calling any Spring MVC controller.
                </para>
            </listitem>
            <listitem>
                <para><emphasis role='bold'>Submit events</emphasis>, a special type of event handled by configured <link linkend="ajax-handlers">handlers</link> <emphasis role='bold'>after</emphasis> executing any Spring MVC controller.
                </para>
            </listitem>
        </itemizedlist>
        <para>Ajax action events are fired in web pages as follows:
        </para>
        <para>
            <programlisting><![CDATA[
            <input type="button" value="Press" onclick="JavaScript:doAjaxAction('doSomething', this);"> 
            ]]></programlisting> 
        </para>
        <para>You have to simply call the (pre-implemented) <emphasis role='bold'>doAjaxAction</emphasis> function, passing it the <emphasis role='bold'>name of the event</emphasis> you want to fire (''doSomething'') and the html element that fired the event (that should always be <emphasis role='bold'>this</emphasis>).
        </para>
        <para>The JavaScript action event corresponds to a server side event:
        </para>
        <para>
            <programlisting><![CDATA[
            public interface AjaxEvent { 
                
            public String getEventId(); 
                
            public HttpServletRequest getHttpRequest(); 
                
            public String getElementName(); 
                
            public void setElementName(String elementName); 
            } 
            ]]></programlisting> 
        </para>
        <para><programlisting><![CDATA[
            public interface AjaxActionEvent extends AjaxEvent { 
            } 
            ]]></programlisting> 
        </para>
        <para>Using the server side event you can access:
        </para>
        <itemizedlist>
            <listitem>
                <para>The event id (corresponding to the event name above)
                </para>
            </listitem>
            <listitem>
                <para>The Java <ulink url='http://java.sun.com/j2ee/1.4/docs/api/javax/servlet/ServletRequest.html'><citetitle>HttpServletRequest</citetitle></ulink> object.
                </para>
            </listitem>
            <listitem>
                <para>The name of the html element firing the event.
                </para>
            </listitem>
        </itemizedlist>
        <para>Talking about submit events, you have to write:
        </para>
        <para>
            <programlisting><![CDATA[
            <input type="button" value="Press" onclick="JavaScript:doAjaxSubmit('submit', this);"> 
            ]]></programlisting>
        </para>
        <para>You have to simply call the (pre-implemented) <emphasis role='bold'>doAjaxSubmit</emphasis> function, passing it the <emphasis role='bold'>name of the submit event</emphasis> you want to fire (''submit'') and the html element that fired the event (that should always be <emphasis role='bold'>this</emphasis>).
        </para>
        <para>The JavaScript submit event corresponds also to a server side event:
        </para>
        <para>
            <programlisting><![CDATA[
            public interface AjaxSubmitEvent extends AjaxEvent { 
                
            public Errors getValidationErrors(); 
                
            public void setValidationErrors(Errors errors); 
            } 
            ]]></programlisting>
        </para>
        <para>In addition to those defined in ''AjaxActionEvent''s, you can also access:
        </para>
        <itemizedlist>
            <listitem>
                <para>A container of so called <emphasis role='bold'>validation errors</emphasis>, for managing form submission errors.
                </para>
            </listitem>
        </itemizedlist>
        <para>Recall that submit events are handled ''after'' calling the eventually configured Spring MVC controller: so, you can implement your validation and "on submit" logic into your controller, as you would always do, and use an Ajax handler for updating your form, showing for example form errors.
        </para>
    </sect2>
    <sect2 id='ajax-handlers'><title id='ajax-handlers-title'>Ajax Handlers</title>
        <para>The Ajax handler is the server side component to be implemented for managing Ajax events.
            This is the base interface of an Ajax handler: 
        </para>
        <para>
            <programlisting><![CDATA[
            public interface AjaxHandler { 
        
            public boolean supports(AjaxEvent event); 
        
            public AjaxResponse handle(AjaxEvent event); 
            } 
            ]]></programlisting>
        </para>
        <itemizedlist>
            <listitem><para>public boolean supports(AjaxEvent event) : Check if ''this'' handler supports (can handle) the given, generic, <emphasis role='bold'>AjaxEvent</emphasis></para></listitem>
            <listitem><para>public AjaxResponse handle(AjaxEvent event) : Handle the given, generic, <emphasis role='bold'>AjaxEvent</emphasis> (if supported) and returns an appropriate <emphasis role='bold'>AjaxResponse</emphasis> (see <link linkend="ajax-response">Ajax Response</link>).</para></listitem>
        </itemizedlist>
        <para>Out of the box, the Ajax Framework provides an AjaxHandler abstract implementation which provides a straightforward way of implementing Ajax handlers: the <emphasis role='bold'>AbstractAjaxHandler</emphasis>.
            AbstractAjaxHandler is an event dispatcher based on Java reflection and Ajax events name (''id''): it implements the two methods above dispatching events to methods named after the event id. So, for handling different events, you have to simply implement a method named after the event id you want to handle, with the following signature: 
        </para>
        <para><programlisting><![CDATA[public AjaxResponse eventId(AjaxEvent )]]></programlisting>
        </para>
        <para>Given an ajax event with id ''countrySelection'', the handling method will be:
        </para>
        <para><programlisting><![CDATA[public AjaxResponse countrySelection(AjaxEvent )]]></programlisting>
        </para>
        <para>Doing so you handle generic ''AjaxEvent''s.
            If you want to handle ''AjaxActionEvent''s or ''AjaxSubmitEvent''s, simply write methods with the following signatures: 
        </para>
        <para><programlisting><![CDATA[public AjaxResponse eventId(AjaxActionEvent )]]></programlisting>
        </para>
        <para><programlisting><![CDATA[public AjaxResponse eventId(AjaxSubmitEvent )]]></programlisting>
        </para>
        <para>However, you are free to implement a different handling strategy, directly implementing the interface above.
        </para>
        <para>You've seen how to fire events from web pages, and how to handle them through AjaxHandlers.
            The next step is <emphasis role='bold'>how to associate events with handlers</emphasis>. 
        </para>
        <sect3 id='associating-events-with-handlers'><title id='associating-events-with-handlers-title'>Associating events with handlers</title>
            <para>Once defined your events and implemented your handlers, you need to <emphasis role='bold'>associate</emphasis> them.
            </para>
            <para>For <emphasis role='bold'>security reason</emphasis>, web pages events and ajax handlers are not automatically associated, nor can be globally associated.
                If it were so, malicious users could hack your JavaScript events and execute unwanted events. 
            </para>
            <para>So, events and handlers are associated <emphasis role='bold'>per page path</emphasis>, that is, you have to configure every handler to manage events fired by a pre-determined, restricted, set of pages.
                Specifically, you can configure an handler to manage events fired by a specific, single, web page, or by web pages defined with <ulink url='http://ant.apache.org'><citetitle>Ant</citetitle></ulink> style pattern matching. 
                An example is worth thousand words: 
            </para>
            <para>
                <programlisting><![CDATA[
                <bean id="ajaxInterceptor" class="org.springmodules.xt.ajax.AjaxInterceptor">
                
                <property name="handlerMappings">
                
                <props>
                
                <prop key="/ajax/ex*">ajaxLoadOfficesHandler</prop>
                <prop key="/ajax/ex1.page">ajaxTestActionsHandler</prop>
                <prop key="/ajax/ex2.page">ajaxSelectionHandler</prop>
                <prop key="/ajax/ex4.action">ajaxListEmployeesHandler</prop>
                
                </props>
                
                </property>
                
                </bean>
                ]]></programlisting>
            </para>
            <para>As you can notice, handlers are configured into the Spring application context, via a standard bean configuration.
                Specifically, they are configured in the <emphasis role='bold'>AjaxInterceptor</emphasis> bean. 
                The first ''prop'' entry associate the handler with an Ant style pattern, while others associate handlers with single pages. 
                Doing so, you can also ''merge'' handlers, applying more handlers to the same group of pages. When more handlers apply for the same event, the one configured for matching the longest path wins. 
            </para>
        </sect3>
    </sect2>
    <sect2 id='ajax-actions'><title id='ajax-actions-title'>Ajax Actions</title>
        <para>Ajax actions are created by handlers and have effect on the client.
            This is the base interface for implementing an Ajax action: 
        </para>
        <para>
            <programlisting><![CDATA[
            public interface AjaxAction { 
        
            public String execute(); 
            } 
            ]]></programlisting> 
        </para>
        <itemizedlist>
            <listitem><para>public String execute() : Execute the action, optionally returning a string representing the action result.</para></listitem>
        </itemizedlist>
        <para>Actions can do various things, depending on the concrete implementation: most of the time they render HTML <link linkend="components">components</link>.
        </para>
    </sect2>
    <sect2 id='components'><title id='components-title'>Components</title>
        <para><emphasis role='bold'>AjaxAction</emphasis>s can render HTML components implementing this interface:
        </para>
        <para><programlisting><![CDATA[
            public interface Component { 
        
            public String render(); 
            } 
            ]]></programlisting>
        </para>
        <para>Each component renders itself through the <emphasis role='bold'>render()</emphasis> method, returning a string representation of the HTML rendering.
            So, the <emphasis role='bold'>execute()</emphasis> method of actions rendering components returns the rendering of all associated components. 
            The association between actions and components depends on the concrete action implementation: however, most of the time it is at action construction. 
            Here is a code snippet: 
        </para>
        <para><programlisting><![CDATA[
            public TaconiteReplaceContentAction(String elementId, List<Component> components); 
        
            public TaconiteReplaceContentAction(String elementId, Component component); 
            ]]></programlisting>
        </para>
    </sect2>
    <sect2 id='ajax-response'><title id='ajax-response-title'>Ajax Response</title>
        <para><emphasis role='bold'>AjaxResponse</emphasis> objects finally carry actions to clients.
            This is the base interface: 
        </para>
        <para>
            <programlisting><![CDATA[
            public interface AjaxResponse<T extends AjaxAction> { 
        
            public void addAction(T action); 
        
            public String getResponse(); 
            } 
            ]]></programlisting>
        </para>
        <itemizedlist>
            <listitem><para>public void addAction(T action) : Add an action to send to the client.</para></listitem>
            <listitem><para>public String getResponse() : Return the current response, as resulted from actions currently contained.</para></listitem>
        </itemizedlist>
        <para>Once constructed and filled with actions, you'll have to simply return your Ajax response from your handler method.
        </para>
    </sect2>
    <sect2 id='what-happens-under-the-hood:-xt-and-taconite'><title id='what-happens-under-the-hood:-xt-and-taconite-title'>What happens under the hood: Spring Modules XT Ajax Framework and Taconite</title>
        <para>The way Spring Modules XT Ajax Framework interacts with client web pages is based on the wonderful <ulink url='http://taconite.sourceforge.net'><citetitle>Taconite</citetitle></ulink> JavaScript library.
            So, for using the Ajax Framework you have to include the following JavaScript library in your Ajax-enabled web pages: 
        </para>
        <para>
            <programlisting><![CDATA[
            <script type="text/javascript" src='springxt.js'></script> 
            ]]></programlisting> 
        </para>
        <para>The ''springxt.js'' file contains some Spring Modules XT Ajax javascript functions plus a modified version of the Taconite library.
        </para>
    </sect2>

</sect1>
