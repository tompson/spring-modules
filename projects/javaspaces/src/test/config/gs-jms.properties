# ====================================================================================================================
# GigaSpaces configuration overwriting file, used for overwrite
# the space and container schema properties as well as other system properties.
# If client has requested to load a properties file (or passed a Properties java object), we attempt to load the properties file
# from <GS dir>/config (if <GS dir> is in the classpath) or from an http url.
# if it is found, we load it to the system, set these attributes to the SpaceURL
# properties data structure.
# Any system property set overwrites any other settings, then the Properties file (or user defined
# custom Properties object which might be passed) is parsed, its properties are injected to the system
# and later used to override the space/container/cluster configurations, as well as other VM system properties.
#
# The following types of properties are supported as part of the properties object/file:
# ======================================================================================
# 1. space/container configuration - the prop key is the XPath of the element as it set in the space/container schema xml file.
# e.g. For space config: space-config.lrmi-stub-handler.protocol-name=rmi
# e.g. For container config: com.j_spaces.core.container.directory_services.jini_lus.enabled=false
#
# 2. cluster configuration - the prop key is the system property set into the ${elementname} in the cluster schema xml file.
# 3. System properties - the key must start with -D, and indicates the system to set that key/value as a system property.
# 4. SpaceURL attributes - the key must start with gs.space.url.arg.<atribute name> e.g. gs.space.url.arg.total_members=111
# or gs.space.url.arg_line=schema=persistent&cluster_schema=async_replicated&total_members=3&id=2&nowritelease=true&fifo=true&create
# - The space url args should be all in lower case.
# - Usage of the ${xxx} setting via a system property is valid in any scenario, but that will be overwritten if option number 1 is used.
#
#===================================================
# Space and container XPath PROPERTIES:
#===================================================
# turn on the jms services - if true we enable Gigaspaces jms support by registering the jms administrated objects
# in the directory service. Default value: false
com.j_spaces.core.container.directory_services.jms_services.enabled=true

#Coma separated list of the JMS Admin objects. MyTopic/MyQueue are default destinations
space-config.jms.administrated-destinations.topics.topic-names=MyTopic,TempTopic
space-config.jms.administrated-destinations.queues.queue-names=MyQueue,TempQueue,A,B,C,D,E,F
-Dcom.gs.reggie.classpath.prefix=/global
#===================================================
# SYSTEM PROPERTIES:
#===================================================
# RECOMMENDED: Common RMI related system properties settings
#
# Runtime configuration report of the overall system configurations (spaces, container, cluster)
# system env, system properties etc.
-Dcom.gs.env.report=true
-Dcom.gs.jms.enabled=true
-Dcom.gs.client.debug=true

#===================================================
# Space URL attributes:
#===================================================
#gs.space.url.arg.total_members=10
# Example how to set a list of Space URL attributes:
#gs.space.url.arg_line=schema=persistent&id=2&total_members=10&Create