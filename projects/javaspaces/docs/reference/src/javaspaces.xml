<?xml version="1.0" encoding="UTF-8"?>
<chapter id="javaspaces">
  <title>JavaSpaces</title>

  <sect1>
     

    <title>Introduction</title>

     JavaSpaces module offers Spring-style services, like transaction management, template, callback and interceptor as well as remoting services to JavaSpaces environments. 
  </sect1>

  <sect1>
    <title>JavaSpaces configuration</title>

    <para>One challenge when dealing with Jini-based environments(like
    JavaSpaces) is retrieving the approapriate services. JavaSpaces module
    addresses this problem by providing generic as well as customized classes
    to work with various JavaSpaces implementations as well as Jini services
    in a simple and concise manner.</para>

    <sect2>
      <title>Using specialized classes</title>

      <para>JavaSpaces modules offers configuration support of the box
      for:</para>

      <sect3>
        <title>Blitz</title>

        <para><ulink
        url="http://www.dancres.org/bjspj/docs/docs/blitz.html">Blitz</ulink>
        is an open-source implementation of JavaSpaces. JavaSpaces module
        provides two Blitz-based factory beans:</para>

        <programlisting>&lt;beans&gt;
...
 &lt;!-- Blitz based localSpace --&gt;
 &lt;bean id="blitzLocalSpace" class="org.springmodules.javaspaces.blitz.LocalSpaceFactoryBean"&gt;
  &lt;property name="configuration" 
     value="classpath:/org/springmodules/javaspaces/blitz/blitz.config"/&gt;
 &lt;/bean&gt;
 &lt;!-- Null space - useful for tests --&gt;
 &lt;bean id="blitzLocalSpace" class="org.springmodules.javaspaces.blitz.NullSpaceFactoryBean"/&gt;
&lt;/beans&gt;</programlisting>
      </sect3>

      <sect3>
        <title>GigaSpaces</title>

        <para><ulink url="http://www.gigaspaces.com/">Gigaspaces</ulink> is a
        commercial JavaSpaces implementation. See the dedicated documentation
        for more support informatoin:</para>

        <programlisting>&lt;beans&gt;
 &lt;!-- GigaSpace localSpace --&gt;
 &lt;bean id="gigaSpaceLocalSpace" 
    class="org.springmodules.javaspaces.gigaspaces.GigaSpacesFactoryBean"&gt;
  &lt;property name="urls"&gt;
   &lt;list&gt;
    &lt;value&gt;/./myCache?properties=gs&amp;amp;&lt;/value&gt;
   &lt;/list&gt;
  &lt;/property&gt;
 &lt;/bean&gt;
&lt;/beans&gt;</programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title>Using a generic Jini service</title>

      <para>For generic Jini services (including other JavaSpaces
      implementations), JiniServiceFactoryBean can be used for
      retrieval:</para>

      <programlisting>&lt;beans&gt;
  &lt;bean id="anotherSpace" class="org.springmodules.jini.JiniServiceFactoryBean"&gt;
   &lt;property name="serviceClass" value="net.jini.space.JavaSpace"/&gt;
   &lt;property name="serviceName" value="SomeJavaSpacesImplementation"/&gt;
   &lt;property name="timeout" value="10000"/&gt;
  &lt;/bean&gt;
&lt;/beans&gt;</programlisting>

      <para></para>
    </sect2>
  </sect1>

  <sect1>
    <title>Inversion of Control: JavaSpaceTemplate and
    JavaSpaceCallback</title>

    <para><emphasis>JavaSpaceTemplate</emphasis> is one of the core classes of
    the JavaSpaces module. It allows the user to work directly against the
    native JavaSpace API in a consistent manner, handling any exceptions that
    might occur and taking care of the ongoing transaction (if any) as well as
    converting the exceptions into Spring DAO and Remote exception hierarchy.
    The template can be constructed either programatically or declaratively
    (through Spring's xml) and requires a JavaSpace implementation
    instance:</para>

    <programlisting>&lt;beans&gt;
  &lt;bean id="javaSpace" class="..."&gt;
  ...
  &lt;/bean&gt;
  &lt;bean id="spaceTemplate" class="org.springmodules.javaspaces.JavaSpaceTemplate"&gt;
   &lt;property name="space" ref="javaSpace"/&gt;
  &lt;/bean&gt;
&lt;/beans&gt;</programlisting>

    <para>Once constructed the <emphasis>JavaSpaceTemplate</emphasis> offers
    shortcut methods to the JavaSpace interface as well as native
    access:</para>

    <programlisting>spaceTemplate.execute(new JavaSpaceCallback() {
  public Object doInSpace(JavaSpace js,Transaction transaction) 
    throws RemoteException, TransactionException, 
           UnusableEntryException, InterruptedException {
      ...
      Entry myEntry = ...;
      js.write(myEntry, transaction, Lease.FOREVER);
      Entry anotherEntry = ...;
      js.read(anotherEntry, transaction, Lease.ANY);
      return null;
     }
    });</programlisting>

    <para>The advantage of the <emphasis>JavaSpaceCallback</emphasis> is that
    it allows several operations on the JavaSpace API to be grouped and used
    inside the transaction or with other Jini transactions (for example if
    using multiple nested <emphasis>JavaSpaceCallbacks</emphasis>).</para>
  </sect1>

  <sect1>
    <title>Transaction Management</title>

    <para>One important feature of JavaSpaces module is the
    <emphasis>JiniTransactionManager</emphasis> which integrates Jini
    transaction API with Spring transaction infrastructure. This allows users
    for example to use declaratively or programatically use Jini transactions
    in the same manner as with JDBC-based transactions - without any code
    change or API coupling; changing the transaction infrastructure is as easy
    as changing some configuration lines (see Spring <ulink
    url="http://static.springframework.org/spring/docs/2.0.x/reference/transaction.html">reference
    documentation </ulink>for more information). Using
    <emphasis>JiniTransactionManager</emphasis> is straight forward:</para>

    <programlisting>&lt;beans&gt;
 &lt;bean id="javaSpace" class="..."&gt;

 &lt;bean id="jiniTransactionManager" class="org.springmodules.jini.JiniServiceFactoryBean"&gt;
  &lt;property name="serviceClass" value="net.jini.core.transaction.server.TransactionManager"/&gt;
  &lt;property name="timeout" value="10000"/&gt;
 &lt;/bean&gt;

 &lt;!-- declaration of jini transaction manager --&gt;
 &lt;bean id="transactionManager" class="org.springmodules.transaction.jini.JiniTransactionManager"&gt;
  &lt;property name="transactionManager" ref="jiniTransactionManager"/&gt;
  &lt;property name="transactionalContext" ref="javaSpace"/&gt;
 &lt;/bean&gt;
 ...
&lt;/beans&gt;</programlisting>

    <para><emphasis>JiniTransactionManager</emphasis> requires two
    parameters:</para>

    <itemizedlist>
      <listitem>
        <para>transactionManager - an instance of
        net.jini.core.transaction.server.TransactionManager. In most cases
        this is provided by <ulink
        url="http://java.sun.com/products/jini/2.0/doc/api/com/sun/jini/mahalo/package-summary.html">Mahalo</ulink>
        and can be retrieved using the generic JiniServiceFactoryBean as we
        have discussed.</para>
      </listitem>

      <listitem>
        <para>transactionalContext - which is a simple object used for
        detecting the transaction context as Jini transactions can spawn
        across several contexts.</para>
      </listitem>
    </itemizedlist>

    <para>To some extent, the <emphasis>JiniTransactionManager</emphasis> is
    similar to Spring's <ulink
    url="http://static.springframework.org/spring/docs/2.0.x/api/org/springframework/transaction/jta/JtaTransactionManager.html">JtaTransactionManager</ulink>,
    provinding integration with a custom transactional API.</para>

    <para>Note that <emphasis>JiniTransactionManager</emphasis> is not
    JavaSpace specific - it can be used on any Jini resource.</para>
  </sect1>

  <sect1>
    <title>Remoting: JavaSpaceInterceptor</title>

    <para><emphasis>JavaSpaceInterceptor</emphasis> represents an important
    feature that allows method calls to be 'published' and retrieved
    transparently to and from the space (in a manner similar to delegate
    worker). The calls can be blocking (synchronous) or non-blocking
    (asynchronous). Consider the following context:</para>

    <programlisting>&lt;beans&gt;

 &lt;bean id="javaSpace" clas="..."/&gt;

 &lt;bean id="spaceTemplate" class="org.springmodules.javaspaces.JavaSpaceTemplate"&gt;
  &lt;property name="space" ref="javaSpace"/&gt;
 &lt;/bean&gt;

 &lt;bean id="spaceInterceptor" class="org.springmodules.javaspaces.JavaSpaceInterceptor"&gt;
  &lt;property name="javaSpaceTemplate" ref="spaceTemplate"/&gt;
  &lt;property name="timeoutMillis"&gt;&lt;value&gt;500&lt;/value&gt;&lt;/property&gt;
 &lt;/bean&gt;

 &lt;!-- Client side --&gt;
 &lt;bean id="proxy" class="org.springframework.aop.framework.ProxyFactoryBean"&gt;
  &lt;!--
   Definition of the Spring AOP interceptor chain. The spaceInterceptor
   must be the last interceptor as there is no local target to invoke.
   Any number of other interceptors can be added, e.g. to monitor performance,
   add security or other functionality.
  --&gt;
  &lt;property name="interceptorNames"&gt;
   &lt;list&gt;
    &lt;value&gt;spaceInterceptor&lt;/value&gt;
   &lt;/list&gt;
  &lt;/property&gt;
  &lt;property name="proxyInterfaces"&gt;
   &lt;list&gt;
     &lt;value&gt;org.springmodules.beans.ITestBean&lt;/value&gt;
     &lt;value&gt;org.springframework.core.Ordered&lt;/value&gt;
   &lt;/list&gt;
  &lt;/property&gt;
 &lt;/bean&gt;

 &lt;!--
  Server side. We start these guys as threads.
  Note the singleton=false setting. This means that each one of these we obtain from
  Spring will be a distinct instance.
 --&gt;
 &lt;bean id="testBeanWorker" class="org.springmodules.javaspaces.DelegatingWorker" singleton="false"&gt;
  &lt;property name="javaSpaceTemplate" ref="spaceTemplate"/&gt;
  &lt;property name="delegate" ref="testBean"/&gt;
  &lt;property name="businessInterface"&gt;
   &lt;value&gt;org.springmodules.beans.ITestBean&lt;/value&gt;
  &lt;/property&gt;
 &lt;/bean&gt;
 &lt;!-- method 'consumer' --&gt;
 &lt;bean id="testBean" class="org.springmodules.beans.TestBean" &gt;
  &lt;property name="name"&gt;&lt;value&gt;rod&lt;/value&gt;&lt;/property&gt;
  &lt;property name="age"&gt;&lt;value&gt;34&lt;/value&gt;&lt;/property&gt;
 &lt;/bean&gt;
&lt;/beans&gt;</programlisting>

    <para>There are several important elements inside the context:</para>

    <itemizedlist>
      <listitem>
        <para><emphasis>proxy</emphasis> - represents the client side -all
        calls made to it will be delegated to the JavaSpace. The
        <emphasis>JavaSpaceInterceptor</emphasis> will transform all Method
        Invocations into JavaSpace entries and publish them into the space.
        Interested parties (which can execute the call) will pickup the entry
        and the write back the result which is returned to the caller.</para>
      </listitem>

      <listitem>
        <para><emphasis>testBeanWorker</emphasis> - represents the server
        side. JavaSpaces Module provides already an implementation through
        <emphasis>DelegatingWorker</emphasis> which watches the JavaSpace and
        will pick any method calls which it can compute. The call entries are
        transformed into method invocations which are delegated to the
        approapriate implementation - in our case
        <emphasis>testBean</emphasis>.</para>

        <para></para>
      </listitem>
    </itemizedlist>
  </sect1>
</chapter>