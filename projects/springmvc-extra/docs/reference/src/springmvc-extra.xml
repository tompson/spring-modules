<?xml version="1.0" encoding="UTF-8"?>
<chapter id="springmvc-extra">
  <title>Spring MVC extra</title>

  <sect1 id="springmvc-extra-about">
    <title>About</title>

    <para>The Spring MVC extra module contains classes for improving and
    extending the Spring MVC Framework.</para>
  </sect1>

  <sect1 id="springmvc-extra-usage">
    <title>Usage guide</title>

    <sect2 id="ReflectivePropertyEditor">
      <title>Using the ReflectivePropertyEditor</title>

      <para>The
      <emphasis>org.springmodules.web.propertyeditors.ReflectivePropertyEditor</emphasis>
      is a <ulink
      url="http://java.sun.com/j2se/1.4.2/docs/api/java/beans/PropertyEditor.html"><citetitle>property
      editor</citetitle></ulink> implementation capable of converting any
      object type to and from text, using Java reflection. It converts objects
      to text and vice-versa thanks to four configurable parameters:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">dataAccessObject</emphasis>, the object
          used for converting from text to the actual desired object: it could
          be a Factory, or a DAO.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">dataAccessMethod</emphasis>, the method
          of the dataAccessObject object to call for converting from text to
          object.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">propertyName</emphasis>, the name of the
          property which will represent the object text value.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">stringConvertor</emphasis>, for
          converting the string value to be passed to the
          dataAccessMethod.</para>
        </listitem>
      </itemizedlist>
    </sect2>

    <sect2 id="ReflectiveCollectionEditor">
      <title>Using the ReflectiveCollectionEditor</title>

      <para>The
      <emphasis>org.springmodules.web.propertyeditors.ReflectiveCollectionEditor</emphasis>
      is a <ulink
      url="http://java.sun.com/j2se/1.4.2/docs/api/java/beans/PropertyEditor.html"><citetitle>property
      editor</citetitle></ulink> implementation for converting a collection of
      strings to a collection of objects and vice-versa. For converting you
      have to define the following:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">dataAccessObject</emphasis>, the object
          used for converting from text to the actual desired object: it could
          be a Factory, or a DAO.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">dataAccessMethod</emphasis>, the method
          of the dataAccessObject object to call for converting from text to
          object.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">propertyName</emphasis>, the name of the
          property which will represent the object text value.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">stringConvertor</emphasis>, for
          converting the string value to be passed to the
          dataAccessMethod.</para>
        </listitem>
      </itemizedlist>

      <para>This class is to be used for binding collections in Spring MVC:
      for example, if you want to bind a collection of customers starting from
      a collection of customer ids, obtained from some kind of selection list,
      you can use this class for automatically converting the collection of
      customer ids (strings) to a collection of actual customer
      objects.</para>
    </sect2>

    <sect2 id="EnhancedSimpleFormController">
      <title>Using EnhancedSimpleFormController</title>

      <para>The <emphasis>the
      org.springmodules.web.servlet.mvc.EnhancedSimpleFormController</emphasis>
      is a <ulink
      url="http://www.springframework.org/docs/api/org/springframework/web/servlet/mvc/SimpleFormController.html"><citetitle>form
      controller</citetitle></ulink> which provides facilities for setting
      custom <ulink
      url="http://java.sun.com/j2se/1.4.2/docs/api/java/beans/PropertyEditor.html"><citetitle>property
      editors</citetitle></ulink> in a declarative way. Using the
      <emphasis>setCustomEditor(Map )</emphasis> method you can set a map of
      custom property editors containing, as <emphasis
      role="bold">key</emphasis>, the class of the property in the form
      <emphasis>class:CLASS_NAME</emphasis> if you want to edit all properties
      of the given type, or its path in the form
      <emphasis>property:PROPERTY_PATH</emphasis> if you want to edit only the
      given property, and as <emphasis role="bold">value</emphasis> the name
      of a bean in the application context. Please note that the bean have to
      be a PropertyEditor and must be declared as
      <emphasis>prototype</emphasis>. If the <emphasis>class</emphasis> and
      <emphasis>property</emphasis> prefixes above are missed, the key is
      treated as a class name. So, if you extend the
      EnhancedSimpleFormController for your controllers, you can use the
      method above and avoid to overwrite and manually code the <ulink
      url="http://www.springframework.org/docs/api/org/springframework/web/servlet/mvc/BaseCommandController.html#initBinder(javax.servlet.http.HttpServletRequest,%20org.springframework.web.bind.ServletRequestDataBinder)"><citetitle>initBinder</citetitle></ulink>
      method.</para>

      <para>Here is an XML snippet of EnhancedSimpleFormController custom
      editors configuration into the Spring application context, using the
      default prefix:</para>

      <programlisting>&lt;bean id="exampleController" class="org.acme.ExampleController"&gt;
  &lt;property name="customEditors"&gt;
    &lt;map&gt;
     &lt;entry&gt;
       &lt;key&gt;&lt;value&gt;org.acme.Office&lt;/value&gt;&lt;/key&gt;
       &lt;value&gt;officeEditor&lt;/value&gt;
     &lt;/entry&gt;
    &lt;/map&gt;
  &lt;/property&gt;  
&lt;/bean&gt;     </programlisting>

      <para>This one uses the <emphasis>class</emphasis> prefix:</para>

      <programlisting>&lt;bean id="exampleController" class="org.acme.ExampleController"&gt;
   &lt;property name="customEditors"&gt;
     &lt;map&gt;
       &lt;entry&gt;
         &lt;key&gt;&lt;value&gt;class:org.acme.Office&lt;/value&gt;&lt;/key&gt;
         &lt;value&gt;officeEditor&lt;/value&gt;
       &lt;/entry&gt;
     &lt;/map&gt;
   &lt;/property&gt;  
&lt;/bean&gt; </programlisting>

      <para>Finally, this one uses the <emphasis>property</emphasis>
      prefix:</para>

      <programlisting>&lt;bean id="exampleController" class="org.acme.ExampleController"&gt;
   &lt;property name="customEditors"&gt;
     &lt;map&gt;
      &lt;entry&gt;
        &lt;key&gt;&lt;value&gt;property:office&lt;/value&gt;&lt;/key&gt;
        &lt;value&gt;officeEditor&lt;/value&gt;
      &lt;/entry&gt;
     &lt;/map&gt;
   &lt;/property&gt;  
&lt;/bean&gt;     </programlisting>
    </sect2>

    <sect2 id="FullPathUrlFilenameViewController">
      <title>Using the FullPathUrlFilenameViewController</title>

      <para>The
      <emphasis>org.springmodules.web.servlet.mvc.FullPathUrlFilenameViewController</emphasis>
      is an <ulink
      url="http://www.springframework.org/docs/api/org/springframework/web/servlet/mvc/AbstractUrlViewController.html"><citetitle>AbstractUrlViewController</citetitle></ulink>
      which like the <ulink
      url="http://www.springframework.org/docs/api/org/springframework/web/servlet/mvc/UrlFilenameViewController.html"><citetitle>UrlFilenameViewController</citetitle></ulink>
      transforms the page name at the end of a URL into a view name, but
      preserves the full path in the web URL. For example, the URL
      "/foo/index.html" will correspond to the the "foo/index" view
      name.</para>
    </sect2>

    <sect2 id="AbstractRssView">
      <title>Using the AbstractRssView</title>

      <para>The
      <emphasis>org.springmodules.web.servlet.view.AbstractRssView</emphasis>
      is an abstract superclass for creating RSS views, with the capability of
      supporting many syndication formats through the use of the <ulink
      url="http://wiki.java.net/bin/view/Javawsxml/Rome"><citetitle>Rome</citetitle></ulink>
      library.</para>

      <para>AbstractRssView uses ATOM 1.0 as its default syndication format:
      you can change it by setting the feed type through the following
      method:</para>

      <programlisting>public void setDefaultFeedType(String)            </programlisting>

      <para>Moreover, you can select the syndication format on the fly, using
      the HTTP request parameter <emphasis>type</emphasis>; i.e., the
      <emphasis>http://www.example.org/example.xml?type=rss_1.0</emphasis>
      make a request for an RSS 1.0 file.</para>

      <para>The feed type naming format is explained <ulink
      url="https://rome.dev.java.net/apidocs/0_8/com/sun/syndication/feed/WireFeed.html"><citetitle>here</citetitle></ulink>.</para>

      <para>Then, for constructing your feed, you need to override the
      following method:</para>

      <programlisting>abstract protected void buildFeed(Map,HttpServletRequest,HttpServletResponse,SyndFeed)            </programlisting>

      <para>Here, you can construct your feed filling the <ulink
      url="https://rome.dev.java.net/apidocs/0_8/com/sun/syndication/feed/synd/SyndFeed.html"><citetitle>SyndFeed</citetitle></ulink>
      object.</para>
    </sect2>
  </sect1>
</chapter>