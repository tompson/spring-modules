<?xml version="1.0" encoding="UTF-8"?>
<chapter id="cache">
  <title>Caching</title>

  <sect1 id="cache-introduction">
    <title>Introduction</title>

    <para>
      The
      <emphasis>Caching Module</emphasis>
      provides a consistent abstraction for performing caching, delivering the
      following benefits.
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Provides a consistent programming model across different caching APIs 
          such as <ulink url="http://ehcache.sourceforge.net/">EHCache</ulink>, 
          <ulink url="http://www.jboss.com/products/jbosscache">JBoss Cache</ulink>, 
          <ulink url="http://jakarta.apache.org/jcs/">Java Caching System (JCS)</ulink>
          and <ulink url="http://www.opensymphony.com/oscache">OSCache</ulink>.
        </para>
      </listitem>
      <listitem>  
        <para>
          Provides a unified, simpler, easier to use, API for programmatic use of 
          caching services than most of these previously mentioned APIs.
        </para>
      </listitem>
      <listitem>
        <para>
          Supports different strategies for declarative caching services.
        </para>
      </listitem>
      <listitem>
        <para>
         The <emphasis>Caching Module</emphasis> may be easily extended to 
         support additional cache providers.
        </para>
      </listitem>
    </itemizedlist>
  </sect1>

  <sect1 id="cache-uses">
    <title>Uses</title>

    <para>
      Caching is frequently used to improve application performance. A
      good example is the caching of data retrieved from a database.
      Even though ORM frameworks such as
      <ulink url="http://www.ibatis.com/">iBATIS</ulink>
      and
      <ulink url="http://www.hibernate.org/">Hibernate</ulink>
      already provide built-in caching, the
      <emphasis>Caching Module</emphasis>
      can be useful when executing methods that perform heavy
      calculations, are time consuming, and/or are resource hungry.
    </para>

    <para>
      Caching can be added to frameworks without inherent caching
      support, such as JDBC or
      <ulink
        url="http://www.springframework.org/docs/reference/jdbc.html">
        Spring JDBC</ulink>.
    </para>

    <para>
      The <emphasis>Caching Module</emphasis> may be used to have more control 
      over your caching provider.
    </para>

  </sect1>

  <sect1>
    <title>Configuration</title>

    <para>
      Caching and cache-flushing can be easily configured by following
      the following steps.
    </para>

    <orderedlist>
      <listitem>
        <para>
          <emphasis role="bold">Set up the cache provider.</emphasis>
          Instead of imposing the use of a particular cache
          implementation, the
          <emphasis>Caching Module</emphasis>
          lets you choose a cache provider that best suites the needs of
          your project.
        </para>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Enable the caching services.</emphasis>
          The <emphasis>Caching Module</emphasis> provides two ways to enable 
          caching services.
        </para>

        <orderedlist>
          <listitem>
            <para>Declarative caching services.
              <itemizedlist>
                <listitem>
                  <para><literal>CacheProxyFactoryBean</literal>.</para>
                </listitem>
                <listitem>
                  <para>Source-level metadata attributes using 
                  <ulink
                    url="http://jakarta.apache.org/commons/attributes/">
                    Commons-Attributes</ulink>
                  or 
                  <ulink 
                    url="http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html">
                  JDK 1.5+ Annotations</ulink>.</para>
                </listitem>
                <listitem>
                  <para>AutoProxy with 
                  <literal>MethodMapCachingInterceptor</literal>
                  and <literal>MethodMapFlushingInterceptor</literal>.</para>
                </listitem>
              </itemizedlist>
            </para>
          </listitem>

          <listitem>
            <para>
              Programmatic use (via a single interface,
              <literal>org.springmodules.cache.provider.CacheProviderFacade</literal>).
            </para>
          </listitem>
        </orderedlist>
      </listitem>
    </orderedlist>

    <sect2 id="cache-setup-provider">
      <title>Set up the Cache Provider</title>

      <para>
        The
        <emphasis>Caching Module</emphasis>
        provides a common interface that centralizes the interactions
        with the underlying cache provider. Each facade must implement
        the interface 
        <literal>org.springmodules.cache.provider.CacheProviderFacade</literal>
        or subclass the template 
        <literal>org.springmodules.cache.provider.AbstractCacheProviderFacade</literal>.
      </para>

      <para>
        Each strategy has the following properties.
      </para>

      <orderedlist>
        <listitem>
          <para>
            <emphasis role="bold"><literal>cacheManager</literal>(required).</emphasis>
            <para>
              A cache manager administrates the cache. In general, a cache manager 
              should be able to:
            </para>
            <itemizedlist>
              <listitem>
                <para>Store objects in the cache.</para>
              </listitem>
  
              <listitem>
                <para>Retrieve objects from the cache.</para>
              </listitem>
  
              <listitem>
                <para>Remove objects from the cache.</para>
              </listitem>
  
              <listitem>
                <para>Flush or invalidate one or more regions of the cache, or the
                whole cache (depending on the cache provider.)</para>
              </listitem>
            </itemizedlist>
          </para>
          
          <para>
            The <emphasis>Caching Module</emphasis> provides factories that 
            allow setting up cache managers and ensure that the created cache 
            managers are properly released and destroyed before the Spring 
            application context is closed.
            
            <itemizedlist>
              <listitem>
                <para>
                  <literal>org.springmodules.cache.provider.jboss.JbossCacheManagerFactoryBean</literal>
                </para>
              </listitem>
            </itemizedlist>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>org.springmodules.cache.provider.jcs.JcsManagerFactoryBean</literal>
                </para>
              </listitem>
            </itemizedlist>
            <itemizedlist>
              <listitem>
                <para>
                  <literal>org.springmodules.cache.provider.oscache.OsCacheManagerFactoryBean</literal>
                </para>
              </listitem>
            </itemizedlist>
          
            These factories have a common, 
            <emphasis role="bold">optional</emphasis> property, 
            <emphasis role="bold"><literal>configLocation</literal></emphasis>,
            which can be any resource used for configuration of the cache manager, 
            such as a file or class path resource.
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">
              <literal>failQuietlyEnabled</literal>
              (optional).
            </emphasis>
            <para>
              If <literal>true</literal>, any exception thrown at runtime by the 
              cache manager will not be rethrown, allowing applications to continue
              running even if the caching services fail. The default
              value is <literal>false</literal>: any exception thrown by the
              cache manager will be propagated and eventually will stop the
              execution of the application.
            </para>
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">
              <literal>serializableFactory</literal>
              (optional).
            </emphasis>
            <para>
              Some cache providers, like EHCache and JCS, can only store objects
              that implement the <literal>java.io.Serializable</literal> interface,
              which may be necessary when storing objects in the file system or
              replicating changes in the cache to different nodes in a cluster.
            </para> 
            <para>
              Such requirement imposes a problem when we need to store in the cache 
              objects that are not <literal>Serializable</literal> and we do not 
              have control of, for example objects generated by JAXB.
            </para>
            <para>
              A possible solution could be to &quot;force&quot; serialization on 
              such objects. This can be achieved with
              a
              <literal>org.springmodules.cache.serializable.SerializableFactory</literal>.               
              The <emphasis>Caching Module</emphasis> currently provides one 
              strategy, 
              <literal>org.springmodules.cache.serializable.XStreamSerializableFactory</literal>,
              which uses 
              <ulink url="http://xstream.codehaus.org/">XStream</ulink> to
              <itemizedlist>
                <listitem>
                  <para>Serialize objects to XML before being stored in the cache.</para>
                </listitem>
                <listitem>
                  <para>Create objects back from XML after being retrieved from 
                  the cache.</para>
                </listitem>
              </itemizedlist>
              This feature is disabled by default (the value of 
              <literal>serializableFactory</literal> is <literal>null</literal>.)
            </para>
          </para>
        </listitem>
      </orderedlist>

      <sect3>
        <title>EHCache</title>

        <para>
          <programlisting>
            &lt;!--  
              The created cache manager is a singleton instance of
              net.sf.ehcache.CacheManager
            --&gt;
            &lt;bean id="cacheManager"
              class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"&gt;
            &lt;/bean&gt;

            &lt;bean id="cacheProviderFacade"
              class="org.springmodules.cache.provider.ehcache.EhCacheFacade"&gt;
              &lt;property name="cacheManager" ref="cacheManager" /&gt;
              
              &lt;!-- Optional properties --&gt;
              &lt;property name="failQuietlyEnabled" value="true" /&gt;
              &lt;property name="serializableFactory"&gt;
                &lt;bean class="org.springmodules.cache.serializable.XStreamSerializableFactory" /&gt;
              &lt;/property&gt;
            &lt;/bean&gt;</programlisting>
        </para>
        
        <para>
          <emphasis>
            Please refer to the 
            <ulink url="http://ehcache.sourceforge.net/documentation/">online documentation</ulink>
            for more information about EHCache.  Omar Irbouh posted an
            <ulink
                url="http://opensource.atlassian.com/confluence/spring/display/DISC/Caching+the+result+of+methods+using+Spring+and+EHCache">
                article</ulink> in the Spring Wiki about using EHCache with Spring.
          </emphasis>
        </para>
      </sect3>

      <sect3>
        <title>JBoss Cache</title>

        <para>
          <programlisting>
            &lt;!-- 
              The created cache manager is a singleton instance of 
              org.jboss.cache.TreeCache
            --&gt;
            &lt;bean id="cacheManager"
              class="org.springmodules.cache.provider.jboss.JbossCacheManagerFactoryBean"&gt;
              &lt;!-- Optional properties --&gt;
              &lt;property name="configLocation" value="classpath:org/springmodules/samples/cache-service.xml" /&gt;                            
            &lt;/bean&gt;

            &lt;bean id="cacheProviderFacade"
              class="org.springmodules.cache.provider.jboss.JbossCacheFacade"&gt;
              &lt;property name="cacheManager" ref="cacheManager" /&gt;

              &lt;!-- Optional properties --&gt;
              &lt;property name="failQuietlyEnabled" value="true" /&gt;
              &lt;property name="serializableFactory"&gt;
                &lt;bean class="org.springmodules.cache.serializable.XStreamSerializableFactory" /&gt;
              &lt;/property&gt;
            &lt;/bean&gt;</programlisting>
        </para>

        <para>
          <emphasis>
            Please refer to the
            <ulink url="http://www.jboss.com/products/jbosscache/docs">online documentation</ulink>
            for more information about JBoss Cache.
          </emphasis>
        </para>
      </sect3>

      <sect3>
        <title>Java Caching System</title>

        <para>
          <programlisting>
            &lt;!-- 
              The created cache manager is a singleton instance of 
              org.apache.jcs.engine.control.CompositeCacheManager
            --&gt;
            &lt;bean id="cacheManager"
              class="org.springmodules.cache.provider.jcs.JcsManagerFactoryBean"&gt;
              &lt;!-- Optional properties --&gt;
              &lt;property name="configLocation" value="classpath:org/springmodules/samples/jcs-config.properties" /&gt;                            
            &lt;/bean&gt;

            &lt;bean id="cacheProviderFacade"
              class="org.springmodules.cache.provider.jcs.JcsFacade"&gt;
              &lt;property name="cacheManager" ref="cacheManager" /&gt;

              &lt;!-- Optional properties --&gt;
              &lt;property name="failQuietlyEnabled" value="true" /&gt;
              &lt;property name="serializableFactory"&gt;
                &lt;bean class="org.springmodules.cache.serializable.XStreamSerializableFactory" /&gt;
              &lt;/property&gt;
            &lt;/bean&gt;</programlisting>
        </para>

        <para>
          <emphasis>
            Please refer to the
            <ulink url="http://jakarta.apache.org/jcs/">online documentation</ulink>
            for more information about JCS.
          </emphasis>
        </para>
      </sect3>

      <sect3>
        <title>OSCache</title>

        <para>
          <programlisting>
            &lt;!-- 
              The created cache manager is a singleton instance of 
              com.opensymphony.oscache.general.GeneralCacheAdministrator
            --&gt;
            &lt;bean id="cacheManager"
              class="org.springmodules.cache.provider.oscache.OsCacheManagerFactoryBean"&gt;
              &lt;!-- Optional properties --&gt;
              &lt;property name="configLocation" value="classpath:org/springmodules/samples/oscache-config.properties" /&gt;                            
            &lt;/bean&gt;

            &lt;bean id="cacheProviderFacade"
              class="org.springmodules.cache.provider.oscache.OsCacheFacade"&gt;
              &lt;property name="cacheManager" ref="cacheManager" /&gt;

              &lt;!-- Optional properties --&gt;
              &lt;property name="failQuietlyEnabled" value="true" /&gt;
              &lt;property name="serializableFactory"&gt;
                &lt;bean class="org.springmodules.cache.serializable.XStreamSerializableFactory" /&gt;
              &lt;/property&gt;
            &lt;/bean&gt;</programlisting>
        </para>

        <para>
          <emphasis>
            Please refer to the
            <ulink
              url="http://www.opensymphony.com/oscache/wiki/Documentation.html">
              online documentation
            </ulink>
            for more information about OSCache. Rob Harrop posted in the
            <ulink
              url="http://opensource.atlassian.com/confluence/spring/display/INTEGRATE/OSCache">
              Spring Wiki
            </ulink>
            a much simpler way to set up OSCache with Spring.
          </emphasis>
        </para>
      </sect3>
    </sect2>

    <sect2>
      <title>Declarative Caching Services</title>

      <para>
        Declarative caching services are powered by
        <ulink
          url="http://www.springframework.org/docs/reference/aop.html">Spring AOP</ulink>
        and enabled by these two types of advices.

        <orderedlist>
          <listitem>
            <para>
              <emphasis role="bold">Caching Interceptor.</emphasis>
              <para>
                Subclasses of the template 
                <literal>org.springmodules.cache.interceptor.caching.AbstractCachingInterceptor</literal>
                store in the cache the return value of advised methods.

                <para>
                  Caching interceptors have the following common properties:
                  <itemizedlist>
                    <listitem>
                      <para>
                        <emphasis role="bold">
                          <literal>cacheProviderFacade</literal> (required).
                        </emphasis>
                        <para>
                          An implementation of 
                          <literal>org.springmodules.cache.provider.CacheProviderFacade</literal>. 
                          Please refer to
                          <xref linkend="cache-setup-provider"/>
                          for more details.
                        </para>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <emphasis role="bold">
                          <literal id="cachingModels">cachingModels</literal> (required).
                        </emphasis>
                        <para>
                          <phrase id="cachingModelsPhrase">
                            Caching Models encapsulate the setti how objects are stored in the database.
                          </phrase>
                        </para>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <emphasis role="bold">
                          <literal>cacheKeyGenerator</literal> (optional).
                        </emphasis>
                        <para>
                          An implementation of 
                          <literal>org.springmodules.cache.key.CacheKeyGenerator</literal>.
                          Generates the keys under which objects are stored in
                          the cache. If not set, the caching interceptor will
                          use an instance of 
                          <literal>org.springmodules.cache.key.HashCodeCacheKeyGenerator</literal>,
                          which creates keys based on the hash code of the
                          object to store and a unique identifier.
                        </para>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <emphasis role="bold">
                          <literal>cachingListeners</literal> (optional).
                        </emphasis>
                        <para>
                          An array of instances of the interface
                          <literal>org.springmodules.cache.interceptor.caching.CachingListener</literal>.
                          Each listener is notified when an object is stored in
                          the cache. The <emphasis>Caching Module</emphasis>
                          does not provide any implementation of this interface.
                        </para>
                      </para>
                    </listitem>
                  </itemizedlist>
                </para>
              </para>  
            </para>
          </listitem>

          <listitem>
            <para>
              <emphasis role="bold">Flushing Interceptor.</emphasis>
              <para>
                Subclasses of the template 
                <literal>org.springmodules.cache.interceptor.flush.AbstractFlushingInterceptor</literal>
                flush one or more regions of the cache, or the whole
                cache (depending on the
                cache provider) before or after executing advised methods.
              </para>
            </para>
          </listitem>
        </orderedlist>
      </para>

      <para>
        The following sections describe the different strategies for declarative 
        caching services provided by the <emphasis>Caching Module</emphasis>.
      </para>

      <!--  
      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">CacheProxyFactoryBean.</emphasis>
            The factory
            <literal>
              org.springmodules.cache.interceptor.proxy.CacheProxyFactoryBean
            </literal>
            creates a AOP proxy for a single bean definition. By using the
            CacheProxyFactoryBean all the configuration details for the caching
            services are declared in the Spring configuration file.
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">Source-level metadata-driven Autoproxy.</emphasis>
            Autoproxying is driven by metadata. This produces a similar
            programming model to Microsoft's .Net
            <literal>ServicedComponents</literal>. 
            AOP proxies for caching services are created automatically for
            the bean definition(s) containing source-level metadata. The
            <emphasis>Caching Module</emphasis>
            supports metadata provided by
            <ulink
              url="http://jakarta.apache.org/commons/attributes/">
              Commons-Attributes</ulink>
            and 
            <ulink 
              url="http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html">
            JDK 1.5+ Annotations</ulink>.
          </para>
        </listitem>

        <listitem>
          <para>
            <emphasis role="bold">
              Single
              <literal>MethodInterceptor</literal>
              .
            </emphasis>
            A single
            <literal>MethodInterceptor</literal>
            is used to proxy one or more bean definitions.
          </para>
        </listitem>
      </itemizedlist>
      -->
      
      <sect3>
        <title>CacheProxyFactoryBean</title>

        <para>
          The factory
          <literal>org.springmodules.cache.interceptor.proxy.CacheProxyFactoryBean</literal>
          advises a single bean definition. Under the hood weaving is performed
          using the following advises.

          <itemizedlist>
            <listitem>
              <para>
                <literal>org.springmodules.cache.interceptor.caching.NameMatchCachingInterceptor</literal>.
              </para>
            </listitem>
            <listitem>
              <para>
                <literal>org.springmodules.cache.interceptor.flush.NameMatchFlushingInterceptor</literal>.
              </para>
            </listitem>
          </itemizedlist>
        </para>

        <para>We are going to use EHCache as our cache provider:</para>

        <programlisting>
          1 &lt;bean id="cacheProviderFacade" class="..." /&gt;
          2
          3 &lt;property name="cacheManager" ref="cacheManager" /&gt; 4
          5 &lt;!-- Cache profiles specified as a java.util.Properties
          --&gt; 6 &lt;property name="cacheProfiles"&gt; 7 &lt;props&gt;
          8 &lt;prop key="first"&gt;[cacheName=firstCache]&lt;/prop&gt;
          9 &lt;prop
          key="second"&gt;[cacheName=secondCache]&lt;/prop&gt; 10
          &lt;/props&gt; 11 &lt;/property&gt; 12 &lt;/bean&gt;
        </programlisting>

        <para>
          Now we need to set up the proxy factory,
          <literal>CacheProxyFactoryBean</literal>
          :
        </para>

        <para>
          <programlisting>
            13 &lt;bean id="cacheable" 14
            class="org.springmodules.cache.interceptor.proxy.CacheProxyFactoryBean"&gt;
            15 &lt;property name="cacheProviderFacade"
            ref="cacheProvider" /&gt; 16 &lt;property
            name="cachingAttributes"&gt; 17 &lt;props&gt; 18 &lt;!-- We
            are going to cache the return value of the methods which
            names start with "get" --&gt; 19 &lt;prop
            key="get*"&gt;[cacheProfileId=first]&lt;/prop&gt; 20
            &lt;/props&gt; 21 &lt;/property&gt; 22 &lt;property
            name="cacheFlushAttributes"&gt; 23 &lt;props&gt; 24 &lt;!--
            We are going to flush the cache when the methods which names
            start with "update" are executed --&gt; 25 &lt;prop
            key="update*"&gt;[cacheProfileIds=first,second][flushBeforeExecution=true]&lt;/prop&gt;
            26 &lt;/props&gt; 27 &lt;/property&gt; 28 &lt;property
            name="target"&gt; 29 &lt;!-- The bean to proxy --&gt; 30
            &lt;bean
            class="org.springmodules.cache.integration.CacheableServiceImpl"&gt;
            31 &lt;property name="names"&gt; 32 &lt;list&gt; 33
            &lt;value&gt;James Gosling&lt;/value&gt; 34 &lt;/list&gt; 35
            &lt;/property&gt; 36 &lt;/bean&gt; 37 &lt;/property&gt; 38
            &lt;/bean&gt;
          </programlisting>
        </para>

        <para>
          On line 19 we are telling the proxy factory to store in the
          cache "firstCache" the return value of the methods that start
          with "get". The id "first" is a reference to the cache profile
          defined on line 8.
        </para>

        <para>
          On line 25 we are telling the proxy factory to flush the
          caches "firstCache" and "secondCache"
          <emphasis>after</emphasis>
          the methods that start with "update" are executed. The ids
          "first" and "second" are references to the cache profiles
          defined on lines 8 and 9 respectively.
        </para>
      </sect3>

      <sect3>
        <title>Metadata-driven Autoproxy with Commons-Attributes</title>

        <para>We are going to use JCS as our cache provider:</para>

        <para>
          <programlisting>
            1 &lt;bean id="cacheProvider" 2
            class="org.springmodules.cache.provider.jcs.JcsFacade"&gt; 3
            &lt;property name="cacheManager" ref="cacheManager" /&gt; 4
            5 &lt;!-- Cache profiles specified as a java.util.Properties
            --&gt; 6 &lt;property name="cacheProfiles"&gt; 7
            &lt;props&gt; 8 &lt;prop
            key="first"&gt;[cacheName=firstCache][group=aGroup]&lt;/prop&gt;
            9 &lt;prop
            key="second"&gt;[cacheName=secondCache][group=anotherGroup]&lt;/prop&gt;
            10 &lt;/props&gt; 11 &lt;/property&gt; 12 &lt;/bean&gt;
          </programlisting>
        </para>

        <para>
          <ulink
            url="http://www.springframework.org/docs/reference/aop.html#aop-autoproxy">
            Autoproxy
          </ulink>
          lets Spring "automagically" proxy bean definitions:
        </para>

        <programlisting>
          &lt;bean id="autoproxy"
          class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          /&gt;
        </programlisting>

        <para>
          The metadata processor retrieves the source-level metadata
          which specifies the methods of the bean definitions that
          should be part of the caching services:
        </para>

        <programlisting>
          &lt;bean id="attributes"
          class="org.springframework.metadata.commons.CommonsAttributes"
          /&gt;
        </programlisting>

        <para>
          The caching advisor tells "autoproxy" to create proxies only
          for the bean definitions containing source-level metadata for
          caching:
        </para>

        <programlisting>
          &lt;bean id="cachingAttributeSource"
          class="org.springmodules.cache.interceptor.caching.MetadataCachingAttributeSource"&gt;
          &lt;property name="attributes" ref="attributes" /&gt;
          &lt;/bean&gt;

          &lt;bean id="cachingInterceptor"
          class="org.springmodules.cache.interceptor.caching.CachingInterceptor"&gt;
          &lt;property name="cacheProviderFacade" ref="cacheProvider"
          /&gt; &lt;property name="cachingAttributeSource"
          ref="cachingAttributeSource" /&gt; &lt;/bean&gt;

          &lt;bean id="cachingAttributeSourceAdvisor"
          class="org.springmodules.cache.interceptor.caching.CachingAttributeSourceAdvisor"&gt;
          &lt;constructor-arg ref="cachingInterceptor" /&gt;
          &lt;/bean&gt;
        </programlisting>

        <para>
          The cache-flush advisor tells "autoproxy" to create proxies
          only for the bean definitions containing source-level metadata
          for flushing the cache:
        </para>

        <programlisting>
          &lt;bean id="cacheFlushAttributeSource"
          class="org.springmodules.cache.interceptor.flush.MetadataCacheFlushAttributeSource"&gt;
          &lt;property name="attributes" ref="attributes" /&gt;
          &lt;/bean&gt;

          &lt;bean id="cacheFlushInterceptor"
          class="org.springmodules.cache.interceptor.flush.CacheFlushInterceptor"&gt;
          &lt;property name="cacheProviderFacade" ref="cacheProvider"
          /&gt; &lt;property name="cacheFlushAttributeSource"
          ref="cacheFlushAttributeSource" /&gt; &lt;/bean&gt;

          &lt;bean id="cacheFlushAttributeSourceAdvisor"
          class="org.springmodules.cache.interceptor.flush.CacheFlushAttributeSourceAdvisor"&gt;
          &lt;constructor-arg ref="cacheFlushInterceptor" /&gt;
          &lt;/bean&gt;
        </programlisting>

        <para>Now we define the bean(s) to proxy:</para>

        <programlisting>
          47 &lt;bean id="cacheable" 48
          class="org.springmodules.cache.integration.CacheableServiceImpl"&gt;
          49 &lt;property name="names"&gt; 50 &lt;list&gt; 51
          &lt;value&gt;James Gosling&lt;/value&gt; 52 &lt;/list&gt; 53
          &lt;/property&gt; 54 &lt;/bean&gt;
        </programlisting>

        <para>
          The defined beans must have source-level metadata attributes
          for caching and flushing the cache in order to be proxied. The
          following is the source code of the bean defined on line 47:
        </para>

        <programlisting>
          100 /** 101 * @see Cacheable#getName(int) 102 * 103 *
          @@org.springmodules.cache.interceptor.caching.Cached(cacheProfileId="first")
          104 */ 105 public String getName(int index) { 106 return
          (String) this.names.get(index); 107 } 108 109 /** 110 * @see
          Cacheable#getName(int) 111 * 112 *
          @@org.springmodules.cache.interceptor.flush.FlushCache(cacheProfileIds="first,second",flushBeforeExecution="true")
          113 */ 114 public void updateName(int index, String name) {
          115 this.names.set(index, name); 116 }
        </programlisting>

        <para>
          On line 103 of the Java source we are telling the caching
          advisor to store in the group "aGroup" of the cache
          "firstCache" the return value of the method "
          <literal>getName(int)</literal>
          ." The id "first" is a reference to the cache profile defined
          on line 8 of the Spring configuration file.
        </para>

        <para>
          On line 112 of the Java source we are telling the cache-flush
          advisor to flush the entries in the group "aGroup" of the
          cache "firstCache" and the entries of the group "anotherGroup"
          of the cache "secondCache"
          <emphasis>after</emphasis>
          the method "
          <literal>updateName(int, String)</literal>
          " is executed. The ids "first" and "second" are references to
          the cache profiles defined on lines 8 and 9 of the Spring
          configuration file respectively.
        </para>

      </sect3>

      <sect3>
        <title>Reusing a single MethodInterceptor</title>

        <para>We are going to use OSCache as our cache provider:</para>

        <para>
          <programlisting>
            1 &lt;bean id="cacheProvider" 2
            class="org.springmodules.cache.provider.oscache.OsCacheFacade"&gt;
            3 &lt;property name="cacheManager" ref="cacheManager" /&gt;
            4 5 &lt;!-- Cache profiles specified as a
            java.util.Properties --&gt; 6 &lt;property
            name="cacheProfiles"&gt; 7 &lt;props&gt; 8 &lt;prop
            key="first"&gt;[cronExpression=* * * *
            *][groups=firstGroup][refreshPeriod=600]&lt;/prop&gt; 9
            &lt;prop key="second"&gt;[groups=secondGroup]&lt;/prop&gt;
            10 &lt;/props&gt; 11 &lt;/property&gt; 12 &lt;/bean&gt;
          </programlisting>
        </para>

        <para>
          We need to register custom
          <literal>PropertyEditor</literal>
          s in Spring:
        </para>

        <programlisting>
          13 &lt;bean 14
          class="org.springframework.beans.factory.config.CustomEditorConfigurer"&gt;
          15 &lt;property name="customEditors"&gt; 16 &lt;map&gt; 17
          &lt;entry 18
          key="org.springmodules.cache.interceptor.caching.CachingAttributeSource"
          &gt; 19 &lt;bean 20
          class="org.springmodules.cache.interceptor.caching.CachingAttributeSourceEditor"
          /&gt; 21 &lt;/entry&gt; 22 &lt;entry 23
          key="org.springmodules.cache.interceptor.caching.CacheFlushAttributeSource"
          &gt; 24 &lt;bean 25
          class="org.springmodules.cache.interceptor.caching.CacheFlushAttributeSourceEditor"
          /&gt; 26 &lt;/entry&gt; 27 &lt;/map&gt; 28 &lt;/property&gt;
          29 &lt;/bean&gt;
        </programlisting>

        <para>
          Now it is possible to use a single
          <literal>CachingInterceptor</literal>
          and
          <literal>CacheFlushInterceptor</literal>
          to many beans and have a full control of the methods to
          advise:
        </para>

        <programlisting>
          30 &lt;bean id="cachingInterceptor" 31
          class="org.springmodules.cache.interceptor.caching.CachingInterceptor"&gt;
          32 &lt;property name="cacheProviderFacade" ref="cacheProvider"
          /&gt; 33 &lt;property name="cachingAttributeSource"&gt; 34
          org.springmodules.cache.integration.CacheableServiceImpl.get*=[cacheProfileId=first]
          35 &lt;/property&gt; 36 &lt;/bean&gt; 37 38 &lt;bean
          id="cacheFlushInterceptor" 39
          class="org.springmodules.cache.interceptor.caching.CacheFlushInterceptor"&gt;
          40 &lt;property name="cacheProviderFacade" ref="cacheProvider"
          /&gt; 41 &lt;property name="cacheFlushAttributeSource"&gt; 42
          org.springmodules.cache.integration.CacheableServiceImpl.update*=[cacheProfileIds=first,second][flushBeforeExecution=true]
          43 &lt;/property&gt; 44 &lt;/bean&gt;
        </programlisting>

        <para>
          On line 34 we are telling the caching interceptor to store in
          the group "firstGroup" (with the cron expression "* * * * *"
          and the refresh period of 600 seconds) the return value of the
          methods that start with "get" of a bean of class
          <literal>
            org.springmodules.cache.integration.CacheableServiceImpl
          </literal>
          . The id "first" is a reference to the cache profile defined
          on line 8.
        </para>

        <para>
          On line 42 we are telling the cache-flush interceptor to flush
          the groups "firstGroup" and "secondGroup"
          <emphasis>after</emphasis>
          the methods that start with "update" of a bean of class
          <literal>
            org.springmodules.cache.integration.CacheableServiceImpl
          </literal>
          are executed. The ids "first" and "second" are references to
          the cache profiles defined on lines 8 and 9 respectively.
        </para>

        <para>Now we need to proxy the bean(s):</para>

        <programlisting>
          &lt;!-- Auto proxy --&gt; &lt;bean
          class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator"&gt;
          &lt;property name="beanNames" value="cacheable" / &lt;property
          name="interceptorNames"&gt; &lt;list&gt;
          &lt;value&gt;cachingInterceptor&lt;/value&gt;
          &lt;value&gt;cacheFlushInterceptor&lt;/value&gt; &lt;/list&gt;
          &lt;/property&gt; &lt;/bean&gt;

          &lt;!-- Bean to proxy --&gt; &lt;bean id="cacheable"
          class="org.springmodules.cache.integration.CacheableServiceImpl"&gt;
          &lt;property name="names"&gt; &lt;list&gt; &lt;value&gt;James
          Gosling&lt;/value&gt; &lt;/list&gt; &lt;/property&gt;
          &lt;/bean&gt;
        </programlisting>
      </sect3>
    </sect2>

    <sect2>
      <title>Programmatic Use</title>

      <para>We are going to use EHCache as our cache provider:</para>

      <programlisting>
        1 &lt;bean id="cacheProvider" 2
        class="org.springmodules.cache.provider.ehcache.EhCacheFacade"&gt;
        3 &lt;property name="cacheManager" ref="cacheManager" /&gt; 4 5
        &lt;!-- Cache profiles specified as a java.util.Properties
        --&gt; 6 &lt;property name="cacheProfiles"&gt; 7 &lt;props&gt; 8
        &lt;prop key="first"&gt;[cacheName=firstCache]&lt;/prop&gt; 9
        &lt;prop key="second"&gt;[cacheName=secondCache]&lt;/prop&gt; 10
        &lt;/props&gt; 11 &lt;/property&gt; 12 &lt;/bean&gt;
      </programlisting>

      <para>
        Obtain a reference to the cache provider (the bean
        "cacheProvider" in our example), which should be an
        implementation of the interface
        <literal>
          org.springmodules.cache.provider.CacheProviderFacade
        </literal>
        . This interface exposes the following methods:
      </para>

      <programlisting>
        void cancelCacheUpdate(Serializable cacheKey);

        void flushCache(String[] cacheProfileIds);

        Object getFromCache(Serializable cacheKey, String
        cacheProfileId) throws EntryRetrievalException;

        boolean isFailQuietlyEnabled();

        void putInCache(Serializable cacheKey, String cacheProfileId,
        Object objectToCache);

        void removeFromCache(Serializable cacheKey, String
        cacheProfileId);
      </programlisting>
    </sect2>
  </sect1>
</chapter>