<?xml version="1.0"?>

	<!--
  Build file for the Spring Modules.

  This script requires a "lib" directory containing the necessary third party JAR files.
  See project.properties for the definitions of the properties used in this file.

  Building Spring requires J2SE 1.4; the "dist" JARs are built with Sun's JDK 1.4.2.
  Note: To successfully run the tests, you need to use Xerces or any other JAXP parser
  that properly supports XML includes. A simple way to achieve this is to put
  xml-apis.jar and xercesImpl.jar into your "JAVA_HOME/jre/lib/ext" directory.
-->

<project name="spring-modules" default="usage" basedir=".">

	<property file="project.properties"/>

	<path id="all-libs">

		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>

	</path>

	<target name="usage">

		<echo message=""/>
		<echo message="${name} build file"/>
		<echo message="------------------------------------------------------"/>
		<echo message=""/>
		<echo message="Among the available targets are:"/>
		<echo message=""/>
		<echo message="build    --> build all; don't create JARs"/>
		<echo message="alljars  --> create all JAR files"/>
		<echo message="tests    --> run tests"/>
		<echo message=""/>

	</target>

	<target name="clean" description="Clean all output dirs (dist, javadocs, classes, test-classes, etc)">

		<delete dir="${target.classes.dir}"/>
		<delete dir="${target.testclasses.dir}"/>
		<delete dir="${target.junit.reports.dir}"/>
		<delete dir="${target.junit.summary.dir}"/>
		<delete dir="${target.release.dir}"/>

		<!-- Just kill target dir (it's safer). No need at this point to keep it. -->
		<delete dir="${target.dir}"/>

		<delete dir="${dist.dir}"/>
		<delete dir="${javadocs.dir}"/>

	</target>


	<target name="doc.clean" description="Delete temporary and distribution directories for docs">

		<delete quiet="true" dir="${basedir}/${dist.ref.dir}/pdf"/>
		<delete quiet="true" dir="${basedir}/${dist.ref.dir}/html_single"/>
		<delete quiet="true" dir="${basedir}/${dist.ref.dir}/html"/>

	</target>


	<target name="initdist" description="Initialize the distribution directory">

		<mkdir dir="${dist.dir}"/>

	</target>


<!--
		Compile the main source tree.
		This task depends on the Commons Attributes compile step,
		as some classes must ship with attributes.
	-->
	<target name="build" description="Compile main source tree java files into class files">

		<mkdir dir="${target.classes.dir}"/>

		<javac destdir="${target.classes.dir}" source="1.3" target="1.3" debug="${debug}"
					 deprecation="false" optimize="false" failonerror="true">
			<src path="${src.dir}"/>
			<classpath refid="all-libs"/>
		</javac>

		<copy todir="${target.classes.dir}" preservelastmodified="true">
			<fileset dir="${src.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
				<include name="**/*.dtd"/>
			</fileset>
		</copy>

	</target>


	<target name="modulejars" depends="build,initdist" description="Create module-specific JAR files">

		<delete>
			<fileset dir="${dist.dir}">
				<include name="springmodules-*.jar"/>
			</fileset>
		</delete>

		<jar jarfile="${dist.dir}/springmodules-hivemind.jar">
			<fileset dir="${target.classes.dir}">
				<include name="org/springmodules/hivemind/**"/>
			</fileset>
			<manifest>
				<attribute name="Implementation-Title" value="${springmodules-title}"/>
				<attribute name="Implementation-Version" value="${springmodules-version}"/>
				<attribute name="Springmodules-Version" value="${springmodules-version}"/>
			</manifest>
		</jar>

		<jar jarfile="${dist.dir}/springmodules-jsr94.jar">
			<fileset dir="${target.classes.dir}">
				<include name="org/springmodules/jsr94/**"/>
			</fileset>
			<manifest>
				<attribute name="Implementation-Title" value="${springmodules-title}"/>
				<attribute name="Implementation-Version" value="${springmodules-version}"/>
				<attribute name="Springmodules-Version" value="${springmodules-version}"/>
			</manifest>
		</jar>

	</target>


	<target name="fulljar" depends="build,initdist" description="Create full JAR file with all Spring classes">

		<delete file="${dist.dir}/springmodules.jar"/>

		<jar jarfile="${dist.dir}/springmodules.jar">
			<fileset dir="${target.classes.dir}">
				<include name="org/springmodules/**"/>
			</fileset>
			<manifest>
				<attribute name="Implementation-Title" value="${springmodules-title}"/>
				<attribute name="Implementation-Version" value="${springmodules-version}"/>
				<attribute name="Springmodules-Version" value="${springmodules-version}"/>
			</manifest>
		</jar>

	</target>


	<target name="alljars" depends="modulejars,fulljar,srczip" description="Create all JAR files"/>


	<target name="srczip" depends="initdist" description="Create source ZIP (containing Java sources)">

		<delete file="${dist.dir}/springmodules-src.zip"/>

		<zip zipfile="${dist.dir}/springmodules-src.zip">
			<fileset dir="${src.dir}">
				<include name="org/springmodules/**"/>
			</fileset>
		</zip>

	</target>


	<target name="javadoc" description="Generate framework Javadocs.">

		<mkdir dir="${javadocs.dir}"/>

		<javadoc sourcepath="${src.dir}" destdir="${javadocs.dir}" windowtitle="Spring Modules"
						 additionalparam="-breakiterator" source="1.3" access="package" author="true" version="true" use="true"
						 defaultexcludes="true">
			<doctitle><![CDATA[<h1>Spring Modules</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright (C) 2004-2005 The Spring Modules Project.</i>]]></bottom>
			<classpath refid="all-libs"/>
			<packageset dir="${src.dir}">
				<include name="org/springmodules/**"/>
			</packageset>
			<!-- Unfortunately, jDocs have switched off their package listing, so we can't link to jDocs :( -->
<!--link href="http://java.sun.com/j2ee/1.4/docs/api"/>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
			<link href="http://aopalliance.sourceforge.net/doc"/-->
			<!--link href="http://cglib.sourceforge.net/apidocs"/-->
			<!--link href="http://httpunit.sourceforge.net/doc/api/"/-->
<!--link href="http://jakarta.apache.org/commons/collections/apidocs-COLLECTIONS_3_0/"/>
			<link href="http://jakarta.apache.org/commons/httpclient/apidocs/"/>
			<link href="http://jakarta.apache.org/commons/logging/api/"/>
			<link href="http://www.junit.org/junit/javadoc/"/>
			<link href="http://logging.apache.org/log4j/docs/api/"/-->
		</javadoc>

	</target>


<!--
		This task depends on the Commons Attributes compile step,
		as some tests require source-level attribute support.
	-->
	<target name="buildtests" description="Compile test source tree java files into class files">

		<mkdir dir="${target.testclasses.dir}"/>

		<javac destdir="${target.testclasses.dir}" source="1.3" target="1.3" debug="${debug}"
					 deprecation="false" optimize="false" failonerror="true">
			<src path="${test.dir}"/>
			<classpath refid="all-libs"/>
			<classpath location="${target.classes.dir}"/>
		</javac>

		<!-- Pick up logging config from test directory -->
		<copy todir="${target.testclasses.dir}" preservelastmodified="true">
			<fileset dir="${test.dir}">
				<include name="**/*.properties"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>

	</target>


<!--
		Run test suite. This and clover.tests take their includes and excludes from
		build.properties. However it's possible to run specific tests by passing in
		the test.includes and (optionally) test.excludes properties through the
		command line, as below:
			ant tests -Dtest.includes=org/springframework/jdbc/**/*Test*
	-->
	<target name="tests" depends="buildtests" description="Run tests">

		<property name="reports.dir" value="${target.junit.reports.dir}"/>

		<mkdir dir="${reports.dir}"/>

		<junit forkmode="perBatch" printsummary="yes" haltonfailure="yes" haltonerror="yes">

			<jvmarg line="-Djava.awt.headless=true"/>

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>
		</junit>

	</target>


<!--
		Run test suite and generate test summary.
		Does not halt on failure or error, in contrast to the "tests" target above.
	-->
	<target name="testsummary" depends="buildtests" description="Run tests and generate test summary">

		<property name="reports.dir" value="${target.junit.reports.dir}"/>
		<property name="summary.dir" value="${target.junit.summary.dir}"/>

		<mkdir dir="${reports.dir}"/>
		<mkdir dir="${summary.dir}"/>

		<junit printsummary="yes" haltonfailure="no" haltonerror="no">

			<jvmarg line="-Djava.awt.headless=true"/>

			<!-- Must go first to ensure any jndi.properties files etc take precedence  -->
			<classpath location="${target.testclasses.dir}"/>
			<classpath location="${target.classes.dir}"/>

			<!-- Need files loaded as resources -->
			<classpath location="${test.dir}"/>

			<classpath refid="all-libs"/>

			<formatter type="plain" usefile="false"/>
			<formatter type="xml"/>

			<batchtest fork="yes" todir="${reports.dir}">
				<fileset dir="${target.testclasses.dir}" includes="${test.includes}" excludes="${test.excludes}"/>
			</batchtest>

		</junit>

		<junitreport todir="${reports.dir}">

			<fileset dir="${reports.dir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report todir="${summary.dir}"/>

		</junitreport>

	</target>


	<target name="release" depends="alljars,javadoc,doc.all" description="Generate release zip file">

		<mkdir dir="${target.release.dir}"/>

		<delete file="${target.release.dir}/${release.zip}"/>
		<delete file="${target.release.dir}/${release-with-dependencies.zip}"/>

		<fileset id="main" dir=".">
			<include name="dist/*.jar"/>
			<include name="dist/*.dtd"/>
			<include name="dist/*.tld"/>
			<include name="dist/*.vm"/>
			<include name="dist/*.ftl"/>
			<include name="docs/**"/>
			<exclude name="docs/reference/images/**"/>
			<exclude name="docs/reference/src/**"/>
			<exclude name="docs/reference/styles/**"/>
			<exclude name="docs/reference/.cvsignore"/>
			<exclude name="docs/reference/readme.txt"/>
			<exclude name="docs/reference/lib/**"/>
			<exclude name="docs/reference/html/**"/>
			<exclude name="docs/reference/pdf/images/**"/>
			<include name="samples/hivemind/**"/>
			<include name="src/**"/>
			<include name="test/**"/>
			<include name="*.bat"/>
			<include name="*.txt"/>
			<include name="*.xml"/>
			<include name="*.properties"/>
		</fileset>

		<zip zipfile="${target.release.dir}/${release.zip}">
			<zipfileset refid="main" prefix="${release.path}"/>
		</zip>

		<zip zipfile="${target.release.dir}/${release-with-dependencies.zip}">
			<zipfileset refid="main" prefix="${release.path}"/>
			<zipfileset dir="." prefix="${release.path}">
				<include name="lib/*.txt"/>
				<include name="lib/ant/**"/>
				<include name="lib/antlr/**"/>
				<include name="lib/aopalliance/**"/>
				<include name="lib/cglib/**"/>
				<include name="lib/drools/**"/>
				<include name="lib/hivemind/**"/>
				<include name="lib/jakarta-commons/**"/>
				<include name="lib/janino/**"/>
				<include name="lib/javassist/**"/>
				<include name="lib/jsr94/**"/>
				<include name="lib/junit/**"/>
				<include name="lib/log4j/**"/>
				<include name="lib/opensymphony/**"/>
				<include name="lib/oro/**"/>
				<include name="lib/spring/**"/>
			</zipfileset>
		</zip>

	</target>


	<target name="doc.prepare" description="Extra preparation for the documentation">

		<fail message="XSLT supporting lib not installed. Please see docs/reference/readme.txt for instructions.">
			<condition>
				<not>
					<available file="${basedir}/${doc.ref.dir}/lib"/>
				</not>
			</condition>
		</fail>

	</target>


	<target name="doc.pdf" depends="doc.prepare" description="Compile reference documentation to pdf">

		<mkdir dir="${basedir}/${dist.ref.dir}/pdf/images"/>

		<copy todir="${basedir}/${dist.ref.dir}/pdf/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="-o"/>
			<arg value="${basedir}/${dist.ref.dir}/pdf/docbook_fop.tmp"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/fopdf.xsl"/>
		</java>

		<java classname="org.apache.fop.apps.Fop" fork="true" maxmemory="256m" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="${basedir}/${dist.ref.dir}/pdf/docbook_fop.tmp"/>
			<arg value="${basedir}/${dist.ref.dir}/pdf/springmodules-reference.pdf"/>
		</java>

		<delete file="${dist.ref.dir}/pdf/docbook_fop.tmp"/>

	</target>


	<target name="doc.html" depends="doc.prepare" description="Compile reference documentation to chunked html">

		<mkdir dir="${dist.ref.dir}/html/images"/>

		<copy todir="${basedir}/${dist.ref.dir}/html/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${dist.ref.dir}/html/">
			<classpath>
				<fileset dir="${basedir}/${doc.ref.dir}/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/html_chunk.xsl"/>
		</java>

	</target>


	<target name="doc.htmlsingle" description="Compile reference documentation to single html">

		<mkdir dir="${dist.ref.dir}/html_single/images"/>

		<copy todir="${basedir}/${dist.ref.dir}/html_single/images">
			<fileset dir="${basedir}/${doc.ref.dir}/src/images">
				<include name="*.gif"/>
				<include name="*.svg"/>
				<include name="*.jpg"/>
			</fileset>
		</copy>

		<java classname="com.icl.saxon.StyleSheet" fork="true" dir="${doc.ref.dir}">
			<classpath>
				<fileset dir="${basedir}/${doc.dir}/reference/lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<arg value="-o"/>
			<arg value="${basedir}/${dist.ref.dir}/html_single/index.html"/>
			<arg value="${basedir}/${doc.ref.dir}/src/index.xml"/>
			<arg value="${basedir}/${doc.ref.dir}/styles/html.xsl"/>
		</java>

	</target>


	<target name="doc.all" depends="doc.html,doc.htmlsingle,doc.pdf"
					description="Generate and copy reference documentation"/>

</project>