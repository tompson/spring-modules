import org.springmodules.samples.jrules.model.Car;

ruleset Cars
{
};

/* ############################
            Methods
   ############################ */

function void displayMessage(String ?message) {
	System.out.println(?message);
}

function void init() {
	/*displayMessage("Init!");
	Car ?o=new Car();
	?o.setId(1);
	?o.setName("Ma voiture");
	?o.setType("Test");
	?o.setPrice(10);
	?context.insert(?o);*/
}

/* ############################
            Rules
   ############################ */

rule prices_rules.car_volkswagen1
{
	when
	{
    	?car: Car();
		evaluate((?car.getMark() equals "Volkswagen") && (?car.getPrice() <= 100.0f));
	}
	then
	{
		retract ?car;
		?car.setGoodBargain(true);
		displayMessage("-> " + ?car.isGoodBargain());
		displayMessage(?car.getId() + " - "+?car.getName()+" : " + "Good bargain!");
	}
};

rule prices_rules.car_volkswagen2
{
	when
	{
    	?car: Car();
		evaluate((?car.getMark() equals "Volkswagen") && (?car.getPrice() <= 1000.0f));
	}
	then
	{
		retract ?car;
		?car.setGoodBargain(true);
		displayMessage("-> " + ?car.isGoodBargain());
		displayMessage(?car.getId() + " - "+?car.getName()+" : " + "Good bargain!");
	}
};

/* ############################
            Ruleflow
   ############################ */

functiontask FunctionTask
{
	body {
		init();
	}
};

ruletask RuleTask
{
	firing = allrules;
	ordering = dynamic;
	algorithm = default;
	body {
		prices_rules.car_volkswagen1,
		prices_rules.car_volkswagen2
	}
};

flowtask Ruleflow
{
	property mainflowtask = true;
	body {
		FunctionTask;
		RuleTask;
	}
};