/*
 * Copyright 2002-2005 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springmodules.samples.lucene.index.file.handlers;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;

import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;

import org.apache.lucene.document.Document;
import org.apache.lucene.document.Field;
import org.apache.poi.hdf.extractor.WordDocument;
import org.pdfbox.searchengine.lucene.LucenePDFDocument;
import org.springmodules.lucene.index.object.file.FileDocumentHandler;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.Text;
import org.w3c.tidy.Tidy;

/**
 * @author Thierry Templier
 */
public class JTidyDocumentHandler implements FileDocumentHandler {

	private void appendText(StringBuffer text,String textToAppend) {
		text.append(" ");
		text.append(textToAppend);
	}

	protected String extractTextFromTitle(Element baseElement) {
		StringBuffer text=new StringBuffer();
		NodeList titleTags=baseElement.getElementsByTagName("title");
		for(int cpt=0;cpt<titleTags.getLength();cpt++) {
			Element titleTag=(Element)titleTags.item(cpt);
			Text titleText=(Text)titleTag.getFirstChild();
			appendText(text,titleText.getData());
		}
		return text.toString();
	}

	protected String extractTextFromBody(Element baseElement) {
		StringBuffer text=new StringBuffer();
		NodeList bodyTags=baseElement.getElementsByTagName("body");
		if( bodyTags.getLength()==1 ) {
			Element bodyTag=(Element)bodyTags.item(0);
		}
		return text.toString();
	}

	protected Element loadHtmlFile(InputStream inputStream) throws IOException {
		Tidy tidy=new Tidy();
		tidy.setQuiet(true);
		tidy.setShowWarnings(false);
		org.w3c.dom.Document root=tidy.parseDOM(inputStream,null);
		return root.getDocumentElement();
	}

	/**
	 * @see org.springmodules.lucene.index.object.file.FileDocumentHandler#getDocument(java.io.File, java.io.FileReader)
	 */
	public Document getDocument(File file, InputStream inputStream) throws IOException {
		Document document=new Document();

		//Load the document
		Element baseElement=loadHtmlFile(inputStream);

		//Title
		String title=extractTextFromTitle(baseElement);
		if( title!=null || title.length()>0 ) {
			//The text is analyzed and indexed but not stored
			document.add(Field.UnStored("Title",title));
		}

		//Body
		String body=extractTextFromBody(baseElement);
		if( body!=null || body.length()>0 ) {
			//The text is analyzed and indexed but not stored
			document.add(Field.UnStored("contents",body));
		}

		document.add(Field.Keyword("type", "file"));
		document.add(Field.Keyword("filename", file.getCanonicalPath()));

		return document;
	}

	//private 

}
